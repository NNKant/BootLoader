
BootLoader_Cmd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800425c  0800425c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004264  08004264  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004268  08004268  00014268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800426c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000001ac  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a119  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001caf  00000000  00000000  0002a1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000858  00000000  00000000  0002c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238b0  00000000  00000000  0002cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa2b  00000000  00000000  00050888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41c6  00000000  00000000  0005b2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f479  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027b0  00000000  00000000  0012f4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f38 	.word	0x08003f38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08003f38 	.word	0x08003f38

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <blUartReadData>:
                                  };



void blUartReadData(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t rcvLen = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(blRxBuff,0x00,sizeof(blRxBuff));
 80005ae:	22c8      	movs	r2, #200	; 0xc8
 80005b0:	2100      	movs	r1, #0
 80005b2:	4835      	ldr	r0, [pc, #212]	; (8000688 <blUartReadData+0xe4>)
 80005b4:	f003 f84a 	bl	800364c <memset>
		//First only one byte from Host, which is length field of command packet
		HAL_UART_Receive(BL_CMD_UART,blRxBuff,1,HAL_MAX_DELAY);
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	2201      	movs	r2, #1
 80005be:	4932      	ldr	r1, [pc, #200]	; (8000688 <blUartReadData+0xe4>)
 80005c0:	4832      	ldr	r0, [pc, #200]	; (800068c <blUartReadData+0xe8>)
 80005c2:	f002 fc94 	bl	8002eee <HAL_UART_Receive>
		rcvLen =  blRxBuff[0];
 80005c6:	4b30      	ldr	r3, [pc, #192]	; (8000688 <blUartReadData+0xe4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(BL_CMD_UART,&blRxBuff[1],rcvLen,HAL_MAX_DELAY);
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	492e      	ldr	r1, [pc, #184]	; (8000690 <blUartReadData+0xec>)
 80005d6:	482d      	ldr	r0, [pc, #180]	; (800068c <blUartReadData+0xe8>)
 80005d8:	f002 fc89 	bl	8002eee <HAL_UART_Receive>

		switch(blRxBuff[1])
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <blUartReadData+0xe4>)
 80005de:	785b      	ldrb	r3, [r3, #1]
 80005e0:	3b51      	subs	r3, #81	; 0x51
 80005e2:	2b0b      	cmp	r3, #11
 80005e4:	d84a      	bhi.n	800067c <blUartReadData+0xd8>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <blUartReadData+0x48>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	0800061d 	.word	0x0800061d
 80005f0:	08000625 	.word	0x08000625
 80005f4:	0800062d 	.word	0x0800062d
 80005f8:	08000635 	.word	0x08000635
 80005fc:	0800063d 	.word	0x0800063d
 8000600:	08000645 	.word	0x08000645
 8000604:	0800064d 	.word	0x0800064d
 8000608:	08000655 	.word	0x08000655
 800060c:	0800065d 	.word	0x0800065d
 8000610:	08000665 	.word	0x08000665
 8000614:	0800066d 	.word	0x0800066d
 8000618:	08000675 	.word	0x08000675
		{
		case BL_GET_VER:
			blHandleGetVerCmd(blRxBuff);
 800061c:	481a      	ldr	r0, [pc, #104]	; (8000688 <blUartReadData+0xe4>)
 800061e:	f000 f861 	bl	80006e4 <blHandleGetVerCmd>
			break;
 8000622:	e02f      	b.n	8000684 <blUartReadData+0xe0>
		case BL_GET_HELP:
			blHandleGetHelpCmd(blRxBuff);
 8000624:	4818      	ldr	r0, [pc, #96]	; (8000688 <blUartReadData+0xe4>)
 8000626:	f000 f8a5 	bl	8000774 <blHandleGetHelpCmd>
			break;
 800062a:	e02b      	b.n	8000684 <blUartReadData+0xe0>
		case BL_GET_CID:
			blHandleGetCIDCmd(blRxBuff);
 800062c:	4816      	ldr	r0, [pc, #88]	; (8000688 <blUartReadData+0xe4>)
 800062e:	f000 f8dd 	bl	80007ec <blHandleGetCIDCmd>
			break;
 8000632:	e027      	b.n	8000684 <blUartReadData+0xe0>
		case BL_GET_RDP_STATUS:
			blHandleSectorReadProtectStatus(blRxBuff);
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <blUartReadData+0xe4>)
 8000636:	f000 fa53 	bl	8000ae0 <blHandleSectorReadProtectStatus>
			break;
 800063a:	e023      	b.n	8000684 <blUartReadData+0xe0>
		case BL_GO_TO_ADDR:
			blHandleGoCmd(blRxBuff);
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <blUartReadData+0xe4>)
 800063e:	f000 f91b 	bl	8000878 <blHandleGoCmd>
			break;
 8000642:	e01f      	b.n	8000684 <blUartReadData+0xe0>
		case BL_FLASH_ERASE:
			blHandleFlashEraseCmd(blRxBuff);
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <blUartReadData+0xe4>)
 8000646:	f000 f96f 	bl	8000928 <blHandleFlashEraseCmd>
			break;
 800064a:	e01b      	b.n	8000684 <blUartReadData+0xe0>
		case BL_MEM_WRITE:
			blHandleMemWriteCmd(blRxBuff);
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <blUartReadData+0xe4>)
 800064e:	f000 f9c9 	bl	80009e4 <blHandleMemWriteCmd>
			break;
 8000652:	e017      	b.n	8000684 <blUartReadData+0xe0>
		case BL_EN_RW_PROTECT:
			blHandleEnRwProtect(blRxBuff);
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <blUartReadData+0xe4>)
 8000656:	f000 fa39 	bl	8000acc <blHandleEnRwProtect>
			break;
 800065a:	e013      	b.n	8000684 <blUartReadData+0xe0>
		case BL_MEM_READ:
			blHandleReadOtp(blRxBuff);
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <blUartReadData+0xe4>)
 800065e:	f000 fa81 	bl	8000b64 <blHandleReadOtp>
			break;
 8000662:	e00f      	b.n	8000684 <blUartReadData+0xe0>
		case BL_READ_SECTOR_P_STATUS:
			blHandleSectorReadProtectStatus(blRxBuff);
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <blUartReadData+0xe4>)
 8000666:	f000 fa3b 	bl	8000ae0 <blHandleSectorReadProtectStatus>
			break;
 800066a:	e00b      	b.n	8000684 <blUartReadData+0xe0>
		case BL_OTP_READ:
			blHandleReadOtp(blRxBuff);
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <blUartReadData+0xe4>)
 800066e:	f000 fa79 	bl	8000b64 <blHandleReadOtp>
			break;
 8000672:	e007      	b.n	8000684 <blUartReadData+0xe0>
		case BL_DIS_RW_PROTECT:
			blHandleDisRWProtect(blRxBuff);
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <blUartReadData+0xe4>)
 8000676:	f000 fa7f 	bl	8000b78 <blHandleDisRWProtect>
			break;
 800067a:	e003      	b.n	8000684 <blUartReadData+0xe0>
		default:
			debugMsg("BL Invalid Command\r\n");
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <blUartReadData+0xf0>)
 800067e:	f000 fbf1 	bl	8000e64 <debugMsg>
			break;
 8000682:	bf00      	nop
		memset(blRxBuff,0x00,sizeof(blRxBuff));
 8000684:	e793      	b.n	80005ae <blUartReadData+0xa>
 8000686:	bf00      	nop
 8000688:	20000094 	.word	0x20000094
 800068c:	20000164 	.word	0x20000164
 8000690:	20000095 	.word	0x20000095
 8000694:	08003f50 	.word	0x08003f50

08000698 <blJumpUserAppl>:
		}
	}
}

void blJumpUserAppl(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
   void (*appResetHandler)(void);
   uint32_t mspVal  = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <blJumpUserAppl+0x3c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	60fb      	str	r3, [r7, #12]
   debugMsg("BooltLoader Jump to user application\r\n");
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <blJumpUserAppl+0x40>)
 80006a6:	f000 fbdd 	bl	8000e64 <debugMsg>
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	f383 8808 	msr	MSP, r3
}
 80006b4:	bf00      	nop

   //this function comes from cmsis
   __set_MSP(mspVal);

   uint32_t resetHandler = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <blJumpUserAppl+0x44>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	60bb      	str	r3, [r7, #8]

   appResetHandler = (void*)resetHandler;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	607b      	str	r3, [r7, #4]

   debugMsg("Application reset handler address:%#x\r\n",appResetHandler);
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <blJumpUserAppl+0x48>)
 80006c4:	f000 fbce 	bl	8000e64 <debugMsg>

   //jump to reset handler
   appResetHandler();
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4798      	blx	r3


}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08008000 	.word	0x08008000
 80006d8:	08003f68 	.word	0x08003f68
 80006dc:	08008004 	.word	0x08008004
 80006e0:	08003f90 	.word	0x08003f90

080006e4 <blHandleGetVerCmd>:

void blHandleGetVerCmd(uint8_t * rxBuff)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	uint8_t blVersion;
	//verify check sum of recevied command
	debugMsg("blHandleGetVerCmd\r\n");
 80006ec:	481d      	ldr	r0, [pc, #116]	; (8000764 <blHandleGetVerCmd+0x80>)
 80006ee:	f000 fbb9 	bl	8000e64 <debugMsg>

	//Total length of command packet
	uint32_t cmdPacketLen =  rxBuff[0] + 1;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	3301      	adds	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]

	//extract crc32 sent in packet by host
	uint32_t hostCrc = *((uint32_t *)(rxBuff + cmdPacketLen - 4));
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3b04      	subs	r3, #4
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	613b      	str	r3, [r7, #16]

	if(!blVerifyCrc(&rxBuff[0], cmdPacketLen - 4,hostCrc))
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3b04      	subs	r3, #4
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4619      	mov	r1, r3
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 fa6a 	bl	8000be8 <blVerifyCrc>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d11a      	bne.n	8000750 <blHandleGetVerCmd+0x6c>
	{
		debugMsg("BL Check sum success\r\n");
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <blHandleGetVerCmd+0x84>)
 800071c:	f000 fba2 	bl	8000e64 <debugMsg>
		//Send acknowledgement
		blSendAck(rxBuff[0],1);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2101      	movs	r1, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fa30 	bl	8000b8c <blSendAck>
		blVersion = getBLVersion();
 800072c:	f000 fa92 	bl	8000c54 <getBLVersion>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]
		debugMsg("BL Version :%d %#x\r\n",blVersion,blVersion);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	4619      	mov	r1, r3
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	461a      	mov	r2, r3
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <blHandleGetVerCmd+0x88>)
 800073e:	f000 fb91 	bl	8000e64 <debugMsg>
		blUARTWriteData(&blVersion,1);
 8000742:	f107 030f 	add.w	r3, r7, #15
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fa8f 	bl	8000c6c <blUARTWriteData>
	else
	{
		debugMsg("BL Check Failed\r\n");
		blSendNack();
	}
}
 800074e:	e004      	b.n	800075a <blHandleGetVerCmd+0x76>
		debugMsg("BL Check Failed\r\n");
 8000750:	4807      	ldr	r0, [pc, #28]	; (8000770 <blHandleGetVerCmd+0x8c>)
 8000752:	f000 fb87 	bl	8000e64 <debugMsg>
		blSendNack();
 8000756:	f000 fa35 	bl	8000bc4 <blSendNack>
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08003fb8 	.word	0x08003fb8
 8000768:	08003fcc 	.word	0x08003fcc
 800076c:	08003fe4 	.word	0x08003fe4
 8000770:	08003ffc 	.word	0x08003ffc

08000774 <blHandleGetHelpCmd>:

void blHandleGetHelpCmd(uint8_t *pBuff)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	debugMsg("blHandleGetHelpCmd\r\n");
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <blHandleGetHelpCmd+0x64>)
 800077e:	f000 fb71 	bl	8000e64 <debugMsg>
	//Get total length of packet
	uint32_t cmdPacketLen = blRxBuff[0] + 1;
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <blHandleGetHelpCmd+0x68>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]

	//Extract CRC from received packet
	uint32_t rcvCRC = *((uint32_t *)(blRxBuff + cmdPacketLen - 4));
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3b04      	subs	r3, #4
 800078e:	4a13      	ldr	r2, [pc, #76]	; (80007dc <blHandleGetHelpCmd+0x68>)
 8000790:	4413      	add	r3, r2
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60bb      	str	r3, [r7, #8]

	if(!blVerifyCrc(&blRxBuff[0],cmdPacketLen - 4,rcvCRC))
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3b04      	subs	r3, #4
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	4619      	mov	r1, r3
 800079e:	480f      	ldr	r0, [pc, #60]	; (80007dc <blHandleGetHelpCmd+0x68>)
 80007a0:	f000 fa22 	bl	8000be8 <blVerifyCrc>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d10d      	bne.n	80007c6 <blHandleGetHelpCmd+0x52>
	{
		debugMsg("Check Sum correct\r\n");
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <blHandleGetHelpCmd+0x6c>)
 80007ac:	f000 fb5a 	bl	8000e64 <debugMsg>
		blSendAck(pBuff[0],sizeof(supportedCMDs));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2108      	movs	r1, #8
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f9e8 	bl	8000b8c <blSendAck>
		blUARTWriteData(supportedCMDs,sizeof(supportedCMDs));
 80007bc:	2108      	movs	r1, #8
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <blHandleGetHelpCmd+0x70>)
 80007c0:	f000 fa54 	bl	8000c6c <blUARTWriteData>
	else
	{
		debugMsg("CRC invalid\r\n");
		blSendNack();
	}
}
 80007c4:	e004      	b.n	80007d0 <blHandleGetHelpCmd+0x5c>
		debugMsg("CRC invalid\r\n");
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <blHandleGetHelpCmd+0x74>)
 80007c8:	f000 fb4c 	bl	8000e64 <debugMsg>
		blSendNack();
 80007cc:	f000 f9fa 	bl	8000bc4 <blSendNack>
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	08004010 	.word	0x08004010
 80007dc:	20000094 	.word	0x20000094
 80007e0:	08004028 	.word	0x08004028
 80007e4:	20000000 	.word	0x20000000
 80007e8:	0800403c 	.word	0x0800403c

080007ec <blHandleGetCIDCmd>:


void blHandleGetCIDCmd(uint8_t *pBuff)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	uint16_t blCIDNum = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	82fb      	strh	r3, [r7, #22]
	debugMsg("blHandleGetCIDCmd\r\n");
 80007f8:	481a      	ldr	r0, [pc, #104]	; (8000864 <blHandleGetCIDCmd+0x78>)
 80007fa:	f000 fb33 	bl	8000e64 <debugMsg>

	//Get total length of packet
	uint32_t cmdPacketLen = blRxBuff[0] + 1;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <blHandleGetCIDCmd+0x7c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	613b      	str	r3, [r7, #16]

	//Extract crc from receive packet
	uint32_t rcvCRC = *((uint32_t *)(blRxBuff + cmdPacketLen -4));
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	3b04      	subs	r3, #4
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <blHandleGetCIDCmd+0x7c>)
 800080c:	4413      	add	r3, r2
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]

	if(!blVerifyCrc(&blRxBuff[0],cmdPacketLen - 4,rcvCRC))
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	3b04      	subs	r3, #4
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4619      	mov	r1, r3
 800081a:	4813      	ldr	r0, [pc, #76]	; (8000868 <blHandleGetCIDCmd+0x7c>)
 800081c:	f000 f9e4 	bl	8000be8 <blVerifyCrc>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d115      	bne.n	8000852 <blHandleGetCIDCmd+0x66>
	{
		debugMsg("CRC valid\r\n");
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <blHandleGetCIDCmd+0x80>)
 8000828:	f000 fb1c 	bl	8000e64 <debugMsg>
		blSendAck(pBuff[0],2);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f000 f9aa 	bl	8000b8c <blSendAck>
		blCIDNum = getMCUChipID();
 8000838:	f000 fa2c 	bl	8000c94 <getMCUChipID>
 800083c:	4603      	mov	r3, r0
 800083e:	82fb      	strh	r3, [r7, #22]
		debugMsg("BL MCU ID: %d %#x !!\r\n");
 8000840:	480b      	ldr	r0, [pc, #44]	; (8000870 <blHandleGetCIDCmd+0x84>)
 8000842:	f000 fb0f 	bl	8000e64 <debugMsg>
		blUARTWriteData((uint8_t *)blCIDNum,2);
 8000846:	8afb      	ldrh	r3, [r7, #22]
 8000848:	2102      	movs	r1, #2
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fa0e 	bl	8000c6c <blUARTWriteData>
	else
	{
		debugMsg("CRC invalid\r\n");
		blSendNack();
	}
}
 8000850:	e004      	b.n	800085c <blHandleGetCIDCmd+0x70>
		debugMsg("CRC invalid\r\n");
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <blHandleGetCIDCmd+0x88>)
 8000854:	f000 fb06 	bl	8000e64 <debugMsg>
		blSendNack();
 8000858:	f000 f9b4 	bl	8000bc4 <blSendNack>
}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	0800404c 	.word	0x0800404c
 8000868:	20000094 	.word	0x20000094
 800086c:	08004060 	.word	0x08004060
 8000870:	0800406c 	.word	0x0800406c
 8000874:	0800403c 	.word	0x0800403c

08000878 <blHandleGoCmd>:
		blSendNack();
	}
}

void blHandleGoCmd(uint8_t *pBuff)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t goAddr = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  uint8_t addrValid = ADDR_VALID;
 8000884:	2300      	movs	r3, #0
 8000886:	72fb      	strb	r3, [r7, #11]
  uint8_t addrInvalid = ADDR_INVALID;
 8000888:	2301      	movs	r3, #1
 800088a:	72bb      	strb	r3, [r7, #10]

  debugMsg("blHandleGoCmd\r\n");
 800088c:	4821      	ldr	r0, [pc, #132]	; (8000914 <blHandleGoCmd+0x9c>)
 800088e:	f000 fae9 	bl	8000e64 <debugMsg>

  //Get total length of packet
  uint32_t cmdPacketLen = blRxBuff[0] + 1;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <blHandleGoCmd+0xa0>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	613b      	str	r3, [r7, #16]

  //extract crc of received packet
  uint32_t rcvCRC = *((uint32_t *)(blRxBuff + cmdPacketLen - 4));
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	3b04      	subs	r3, #4
 800089e:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <blHandleGoCmd+0xa0>)
 80008a0:	4413      	add	r3, r2
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	60fb      	str	r3, [r7, #12]

  if(!blVerifyCrc(&blRxBuff[0],cmdPacketLen - 4,rcvCRC))
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	3b04      	subs	r3, #4
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4619      	mov	r1, r3
 80008ae:	481a      	ldr	r0, [pc, #104]	; (8000918 <blHandleGoCmd+0xa0>)
 80008b0:	f000 f99a 	bl	8000be8 <blVerifyCrc>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d127      	bne.n	800090a <blHandleGoCmd+0x92>
  {
	  debugMsg("Check sum valid\r\n");
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <blHandleGoCmd+0xa4>)
 80008bc:	f000 fad2 	bl	8000e64 <debugMsg>
	  blSendAck(pBuff[0],1);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2101      	movs	r1, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f960 	bl	8000b8c <blSendAck>
	  goAddr =  *((uint32_t *)&pBuff[2]);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80008d2:	617b      	str	r3, [r7, #20]
	  debugMsg("Go Addr:%#x\r\n");
 80008d4:	4812      	ldr	r0, [pc, #72]	; (8000920 <blHandleGoCmd+0xa8>)
 80008d6:	f000 fac5 	bl	8000e64 <debugMsg>

	  if(verifyAddr(goAddr) == ADDR_VALID)
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f000 f9ec 	bl	8000cb8 <verifyAddr>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d108      	bne.n	80008f8 <blHandleGoCmd+0x80>
	  {
		  blUARTWriteData(&addrValid, 1);
 80008e6:	f107 030b 	add.w	r3, r7, #11
 80008ea:	2101      	movs	r1, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f9bd 	bl	8000c6c <blUARTWriteData>
		//  void(*lets_jump)(void) = (void *)goAddr;

		//  debugMsg("Jumping to given address\r\n");

		//  lets_jump();
		  blJumpUserAppl();
 80008f2:	f7ff fed1 	bl	8000698 <blJumpUserAppl>
		  blUARTWriteData(&addrInvalid, 1);

	  }

  }
}
 80008f6:	e008      	b.n	800090a <blHandleGoCmd+0x92>
		  debugMsg("Go address Invalid\r\n");
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <blHandleGoCmd+0xac>)
 80008fa:	f000 fab3 	bl	8000e64 <debugMsg>
		  blUARTWriteData(&addrInvalid, 1);
 80008fe:	f107 030a 	add.w	r3, r7, #10
 8000902:	2101      	movs	r1, #1
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f9b1 	bl	8000c6c <blUARTWriteData>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	080040c0 	.word	0x080040c0
 8000918:	20000094 	.word	0x20000094
 800091c:	08004098 	.word	0x08004098
 8000920:	080040d0 	.word	0x080040d0
 8000924:	080040e0 	.word	0x080040e0

08000928 <blHandleFlashEraseCmd>:

void blHandleFlashEraseCmd(uint8_t *pBuff)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	uint8_t eraseStatus = 0x00;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
	debugMsg("blHandleFlashEraseCmd\r\n");
 8000934:	4825      	ldr	r0, [pc, #148]	; (80009cc <blHandleFlashEraseCmd+0xa4>)
 8000936:	f000 fa95 	bl	8000e64 <debugMsg>

	//Get total length of packet
	uint32_t cmdPacketLen = blRxBuff[0] + 1;
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <blHandleFlashEraseCmd+0xa8>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	617b      	str	r3, [r7, #20]

	//extract crc of received packet
	uint32_t rcvCRC = *((uint32_t *)(blRxBuff + cmdPacketLen - 4));
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3b04      	subs	r3, #4
 8000946:	4a22      	ldr	r2, [pc, #136]	; (80009d0 <blHandleFlashEraseCmd+0xa8>)
 8000948:	4413      	add	r3, r2
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	613b      	str	r3, [r7, #16]

	if(!blVerifyCrc(&blRxBuff[0],cmdPacketLen - 4,rcvCRC))
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3b04      	subs	r3, #4
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4619      	mov	r1, r3
 8000956:	481e      	ldr	r0, [pc, #120]	; (80009d0 <blHandleFlashEraseCmd+0xa8>)
 8000958:	f000 f946 	bl	8000be8 <blVerifyCrc>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d12b      	bne.n	80009ba <blHandleFlashEraseCmd+0x92>
	{
		debugMsg("Valid CRC");
 8000962:	481c      	ldr	r0, [pc, #112]	; (80009d4 <blHandleFlashEraseCmd+0xac>)
 8000964:	f000 fa7e 	bl	8000e64 <debugMsg>
		blSendAck(pBuff[0],1);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f90c 	bl	8000b8c <blSendAck>
		debugMsg("Inital Sector:%d, num of sectors:%d\r\n",pBuff[2],pBuff[3]);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3302      	adds	r3, #2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3303      	adds	r3, #3
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4814      	ldr	r0, [pc, #80]	; (80009d8 <blHandleFlashEraseCmd+0xb0>)
 8000986:	f000 fa6d 	bl	8000e64 <debugMsg>

		eraseStatus = excuteFlashErase(pBuff[2],pBuff[3]);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3302      	adds	r3, #2
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3303      	adds	r3, #3
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	4619      	mov	r1, r3
 8000998:	4610      	mov	r0, r2
 800099a:	f000 f9dd 	bl	8000d58 <excuteFlashErase>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]

		debugMsg("Flash Erase Status:%#x\r\n",eraseStatus);
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <blHandleFlashEraseCmd+0xb4>)
 80009a8:	f000 fa5c 	bl	8000e64 <debugMsg>

		blUARTWriteData(&eraseStatus,1);
 80009ac:	f107 030f 	add.w	r3, r7, #15
 80009b0:	2101      	movs	r1, #1
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 f95a 	bl	8000c6c <blUARTWriteData>
	else
	{
		debugMsg("Invalid CRC\r\n");
		blSendNack();
	}
}
 80009b8:	e004      	b.n	80009c4 <blHandleFlashEraseCmd+0x9c>
		debugMsg("Invalid CRC\r\n");
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <blHandleFlashEraseCmd+0xb8>)
 80009bc:	f000 fa52 	bl	8000e64 <debugMsg>
		blSendNack();
 80009c0:	f000 f900 	bl	8000bc4 <blSendNack>
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	080040f8 	.word	0x080040f8
 80009d0:	20000094 	.word	0x20000094
 80009d4:	08004110 	.word	0x08004110
 80009d8:	0800411c 	.word	0x0800411c
 80009dc:	08004144 	.word	0x08004144
 80009e0:	08004160 	.word	0x08004160

080009e4 <blHandleMemWriteCmd>:

void blHandleMemWriteCmd(uint8_t *pBuff)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

//	uint8_t addrValid = ADDR_VALID;
	uint8_t writeStatus = 0x00;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
	uint8_t chkSum = 0, len = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	77fb      	strb	r3, [r7, #31]
 80009f4:	2300      	movs	r3, #0
 80009f6:	77bb      	strb	r3, [r7, #30]
	len = pBuff[0];
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	77bb      	strb	r3, [r7, #30]

	uint8_t payLoadLen = pBuff[6];
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	799b      	ldrb	r3, [r3, #6]
 8000a02:	777b      	strb	r3, [r7, #29]

	uint32_t memAddr = *((uint32_t *)(&pBuff[2]));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a0a:	61bb      	str	r3, [r7, #24]

	chkSum = pBuff[len];
 8000a0c:	7fbb      	ldrb	r3, [r7, #30]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	77fb      	strb	r3, [r7, #31]

	debugMsg("blHandleMemWriteCmd\r\n");
 8000a16:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <blHandleMemWriteCmd+0xd0>)
 8000a18:	f000 fa24 	bl	8000e64 <debugMsg>

	//total length of packet
	uint32_t cmdPacketLen = blRxBuff[0] + 1;
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <blHandleMemWriteCmd+0xd4>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	617b      	str	r3, [r7, #20]

	//extract crc of received packet
	uint32_t rcvCRC = *((uint32_t *)(blRxBuff + cmdPacketLen - 4));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	3b04      	subs	r3, #4
 8000a28:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <blHandleMemWriteCmd+0xd4>)
 8000a2a:	4413      	add	r3, r2
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	613b      	str	r3, [r7, #16]

	if(!blVerifyCrc(&blRxBuff[0],cmdPacketLen - 4,rcvCRC))
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	3b04      	subs	r3, #4
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4619      	mov	r1, r3
 8000a38:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <blHandleMemWriteCmd+0xd4>)
 8000a3a:	f000 f8d5 	bl	8000be8 <blVerifyCrc>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d12e      	bne.n	8000aa2 <blHandleMemWriteCmd+0xbe>
	{
		debugMsg("Valid CRC\r\n");
 8000a44:	481d      	ldr	r0, [pc, #116]	; (8000abc <blHandleMemWriteCmd+0xd8>)
 8000a46:	f000 fa0d 	bl	8000e64 <debugMsg>
		blSendAck(pBuff[0],1);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f89b 	bl	8000b8c <blSendAck>

		debugMsg("mem write address:%#x\r\n",memAddr);
 8000a56:	69b9      	ldr	r1, [r7, #24]
 8000a58:	4819      	ldr	r0, [pc, #100]	; (8000ac0 <blHandleMemWriteCmd+0xdc>)
 8000a5a:	f000 fa03 	bl	8000e64 <debugMsg>

		if(verifyAddr(memAddr) == ADDR_VALID)
 8000a5e:	69b8      	ldr	r0, [r7, #24]
 8000a60:	f000 f92a 	bl	8000cb8 <verifyAddr>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d10f      	bne.n	8000a8a <blHandleMemWriteCmd+0xa6>
	//	if(1)
		{

			writeStatus = excuteMemWrite(&pBuff[7], memAddr,payLoadLen);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3307      	adds	r3, #7
 8000a6e:	7f7a      	ldrb	r2, [r7, #29]
 8000a70:	69b9      	ldr	r1, [r7, #24]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f9b7 	bl	8000de6 <excuteMemWrite>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]

			blUARTWriteData(&writeStatus,1);
 8000a7c:	f107 030f 	add.w	r3, r7, #15
 8000a80:	2101      	movs	r1, #1
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f8f2 	bl	8000c6c <blUARTWriteData>
	else
	{
		debugMsg("Invalid CRC\r\n");
		blSendNack();
	}
}
 8000a88:	e010      	b.n	8000aac <blHandleMemWriteCmd+0xc8>
			debugMsg("Invalid Address\r\n");
 8000a8a:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <blHandleMemWriteCmd+0xe0>)
 8000a8c:	f000 f9ea 	bl	8000e64 <debugMsg>
			writeStatus = ADDR_INVALID;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
			blUARTWriteData(&writeStatus,1);
 8000a94:	f107 030f 	add.w	r3, r7, #15
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8e6 	bl	8000c6c <blUARTWriteData>
}
 8000aa0:	e004      	b.n	8000aac <blHandleMemWriteCmd+0xc8>
		debugMsg("Invalid CRC\r\n");
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <blHandleMemWriteCmd+0xe4>)
 8000aa4:	f000 f9de 	bl	8000e64 <debugMsg>
		blSendNack();
 8000aa8:	f000 f88c 	bl	8000bc4 <blSendNack>
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	08004170 	.word	0x08004170
 8000ab8:	20000094 	.word	0x20000094
 8000abc:	08004188 	.word	0x08004188
 8000ac0:	08004194 	.word	0x08004194
 8000ac4:	080041ac 	.word	0x080041ac
 8000ac8:	08004160 	.word	0x08004160

08000acc <blHandleEnRwProtect>:

void blHandleEnRwProtect(uint8_t *pBuff)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <blHandleSectorReadProtectStatus>:
void blHandleMemRead(uint8_t *pBuff)
{
}

void blHandleSectorReadProtectStatus(uint8_t *pBuff)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	uint16_t status;
	debugMsg("blHandleSectorReadProtectionStatus\r\n");
 8000ae8:	4819      	ldr	r0, [pc, #100]	; (8000b50 <blHandleSectorReadProtectStatus+0x70>)
 8000aea:	f000 f9bb 	bl	8000e64 <debugMsg>

	//total length of packet
	uint32_t cmdPacketLen = blRxBuff[0] + 1;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <blHandleSectorReadProtectStatus+0x74>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]

	//extract crc of received packet
	uint32_t rcvCRC = *((uint32_t *)(blRxBuff + cmdPacketLen - 4));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3b04      	subs	r3, #4
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <blHandleSectorReadProtectStatus+0x74>)
 8000afc:	4413      	add	r3, r2
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	613b      	str	r3, [r7, #16]

	if(!blVerifyCrc(&blRxBuff[0],cmdPacketLen - 4,rcvCRC))
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3b04      	subs	r3, #4
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4812      	ldr	r0, [pc, #72]	; (8000b54 <blHandleSectorReadProtectStatus+0x74>)
 8000b0c:	f000 f86c 	bl	8000be8 <blVerifyCrc>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d112      	bne.n	8000b3c <blHandleSectorReadProtectStatus+0x5c>
	{
		debugMsg("Valid CRC\r\n");
 8000b16:	4810      	ldr	r0, [pc, #64]	; (8000b58 <blHandleSectorReadProtectStatus+0x78>)
 8000b18:	f000 f9a4 	bl	8000e64 <debugMsg>
		//blSendAck(&pBuff[0],2);
		status = readOBRProtectionStatus();
 8000b1c:	f000 f990 	bl	8000e40 <readOBRProtectionStatus>
 8000b20:	4603      	mov	r3, r0
 8000b22:	81fb      	strh	r3, [r7, #14]
		debugMsg("nWRP status: %#x\r\n",status);
 8000b24:	89fb      	ldrh	r3, [r7, #14]
 8000b26:	4619      	mov	r1, r3
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <blHandleSectorReadProtectStatus+0x7c>)
 8000b2a:	f000 f99b 	bl	8000e64 <debugMsg>
		blUARTWriteData((uint8_t *)&status,2);
 8000b2e:	f107 030e 	add.w	r3, r7, #14
 8000b32:	2102      	movs	r1, #2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f899 	bl	8000c6c <blUARTWriteData>
	else
	{
		debugMsg("Invalid CRC\r\n");
		blSendNack();
	}
}
 8000b3a:	e004      	b.n	8000b46 <blHandleSectorReadProtectStatus+0x66>
		debugMsg("Invalid CRC\r\n");
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <blHandleSectorReadProtectStatus+0x80>)
 8000b3e:	f000 f991 	bl	8000e64 <debugMsg>
		blSendNack();
 8000b42:	f000 f83f 	bl	8000bc4 <blSendNack>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	080041c0 	.word	0x080041c0
 8000b54:	20000094 	.word	0x20000094
 8000b58:	08004188 	.word	0x08004188
 8000b5c:	080041e8 	.word	0x080041e8
 8000b60:	08004160 	.word	0x08004160

08000b64 <blHandleReadOtp>:

void blHandleReadOtp(uint8_t *pBuff)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <blHandleDisRWProtect>:

void blHandleDisRWProtect(uint8_t *pBuff)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <blSendAck>:


void blSendAck(uint8_t cmdCode,uint8_t followLen)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	71bb      	strb	r3, [r7, #6]
	//Send 2 Bytes first byte is ack and Sencond byte is len value
	uint8_t ackBuff[2] = {0};
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	81bb      	strh	r3, [r7, #12]
	ackBuff[0] = BL_ACK;
 8000ba0:	23a5      	movs	r3, #165	; 0xa5
 8000ba2:	733b      	strb	r3, [r7, #12]
	ackBuff[1] = followLen;
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(BL_CMD_UART,ackBuff,2,HAL_MAX_DELAY);
 8000ba8:	f107 010c 	add.w	r1, r7, #12
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	4803      	ldr	r0, [pc, #12]	; (8000bc0 <blSendAck+0x34>)
 8000bb4:	f002 f909 	bl	8002dca <HAL_UART_Transmit>

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000164 	.word	0x20000164

08000bc4 <blSendNack>:

void blSendNack(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000bca:	237f      	movs	r3, #127	; 0x7f
 8000bcc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_CMD_UART,&nack,1,HAL_MAX_DELAY);
 8000bce:	1df9      	adds	r1, r7, #7
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <blSendNack+0x20>)
 8000bd8:	f002 f8f7 	bl	8002dca <HAL_UART_Transmit>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000164 	.word	0x20000164

08000be8 <blVerifyCrc>:


uint8_t blVerifyCrc(uint8_t *pData,uint32_t len,uint32_t crcHost)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	uint8_t ret = VERIFY_CRC_FAIL;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	77fb      	strb	r3, [r7, #31]

	uint32_t uwCRCVal = 0xFF;
 8000bf8:	23ff      	movs	r3, #255	; 0xff
 8000bfa:	61bb      	str	r3, [r7, #24]
	for(uint32_t i = 0; i < len; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e00f      	b.n	8000c22 <blVerifyCrc+0x3a>
	{
		uint32_t iData = pData[i];
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4413      	add	r3, r2
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
		uwCRCVal = HAL_CRC_Accumulate(&hcrc,&iData, 1);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2201      	movs	r2, #1
 8000c12:	4619      	mov	r1, r3
 8000c14:	480e      	ldr	r0, [pc, #56]	; (8000c50 <blVerifyCrc+0x68>)
 8000c16:	f000 fe48 	bl	80018aa <HAL_CRC_Accumulate>
 8000c1a:	61b8      	str	r0, [r7, #24]
	for(uint32_t i = 0; i < len; i++)
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3eb      	bcc.n	8000c02 <blVerifyCrc+0x1a>
	}

	__HAL_CRC_DR_RESET(&hcrc);
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <blVerifyCrc+0x68>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <blVerifyCrc+0x68>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f042 0201 	orr.w	r2, r2, #1
 8000c38:	609a      	str	r2, [r3, #8]

	if(uwCRCVal == crcHost)
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d101      	bne.n	8000c46 <blVerifyCrc+0x5e>
	{
		ret = VERIFY_CRC_SUCCESS;
 8000c42:	2300      	movs	r3, #0
 8000c44:	77fb      	strb	r3, [r7, #31]
	}
	return ret;
 8000c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000015c 	.word	0x2000015c

08000c54 <getBLVersion>:

uint8_t getBLVersion(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
	uint8_t ret;
	ret = (uint8_t)BL_VERSION;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	71fb      	strb	r3, [r7, #7]
	return ret;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <blUARTWriteData>:

void blUARTWriteData(uint8_t *pBuff,uint32_t len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_CMD_UART,pBuff,len, HAL_MAX_DELAY);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <blUARTWriteData+0x24>)
 8000c82:	f002 f8a2 	bl	8002dca <HAL_UART_Transmit>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000164 	.word	0x20000164

08000c94 <getMCUChipID>:

uint16_t getMCUChipID(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
	uint16_t ret = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	80fb      	strh	r3, [r7, #6]
	ret = (uint16_t)(DBGMCU->IDCODE);
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <getMCUChipID+0x20>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	80fb      	strh	r3, [r7, #6]
    return ret;
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e0042000 	.word	0xe0042000

08000cb8 <verifyAddr>:

	return ret;
}

uint8_t verifyAddr(uint32_t goAddr)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	uint8_t ret = ADDR_INVALID;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
	if(goAddr >= BL_SRAM1_BASE && goAddr <= BL_SRAM1_END)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cca:	d306      	bcc.n	8000cda <verifyAddr+0x22>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a1d      	ldr	r2, [pc, #116]	; (8000d44 <verifyAddr+0x8c>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d202      	bcs.n	8000cda <verifyAddr+0x22>
	{
		ret = ADDR_VALID;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e02d      	b.n	8000d36 <verifyAddr+0x7e>
	}
	else if(goAddr >= BL_SRAM2_BASE && goAddr <= BL_SRAM2_END)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <verifyAddr+0x8c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d306      	bcc.n	8000cf0 <verifyAddr+0x38>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <verifyAddr+0x90>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d802      	bhi.n	8000cf0 <verifyAddr+0x38>
	{
		ret = ADDR_VALID;
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	e022      	b.n	8000d36 <verifyAddr+0x7e>
	}
	else if(goAddr >= BL_FLASH_BASE && goAddr <= BL_FLASH_END)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000cf6:	d306      	bcc.n	8000d06 <verifyAddr+0x4e>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000cfe:	d202      	bcs.n	8000d06 <verifyAddr+0x4e>
	{
		ret = ADDR_VALID;
 8000d00:	2300      	movs	r3, #0
 8000d02:	73fb      	strb	r3, [r7, #15]
 8000d04:	e017      	b.n	8000d36 <verifyAddr+0x7e>
	}
	else if(goAddr >= BL_SRAM3_BASE && goAddr <= BL_SRAM3_END)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <verifyAddr+0x90>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d906      	bls.n	8000d1c <verifyAddr+0x64>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <verifyAddr+0x94>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d802      	bhi.n	8000d1c <verifyAddr+0x64>
	{
		ret = ADDR_VALID;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
 8000d1a:	e00c      	b.n	8000d36 <verifyAddr+0x7e>
	}
	else if(goAddr >= BL_BKPSRAM_BASE && goAddr <= BL_BKPSRAM_END)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <verifyAddr+0x98>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d306      	bcc.n	8000d32 <verifyAddr+0x7a>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <verifyAddr+0x9c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d202      	bcs.n	8000d32 <verifyAddr+0x7a>
	{
		ret = ADDR_VALID;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e001      	b.n	8000d36 <verifyAddr+0x7e>
	}
	else
	{
		ret = ADDR_VALID;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	2001c000 	.word	0x2001c000
 8000d48:	2001ffff 	.word	0x2001ffff
 8000d4c:	2002ffff 	.word	0x2002ffff
 8000d50:	40024000 	.word	0x40024000
 8000d54:	40025000 	.word	0x40025000

08000d58 <excuteFlashErase>:

uint8_t excuteFlashErase(uint8_t secNum,uint8_t numOfSec)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashEraseHandle;
	uint32_t sectorError;

	HAL_StatusTypeDef status;

	if(numOfSec > 8)
 8000d68:	79bb      	ldrb	r3, [r7, #6]
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	d901      	bls.n	8000d72 <excuteFlashErase+0x1a>
	{
		return INVALID_SECTOR;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	e035      	b.n	8000dde <excuteFlashErase+0x86>
	}

	if((numOfSec == 0xFF) || (numOfSec < 7))
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	2bff      	cmp	r3, #255	; 0xff
 8000d76:	d002      	beq.n	8000d7e <excuteFlashErase+0x26>
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d82e      	bhi.n	8000ddc <excuteFlashErase+0x84>
	{
		if(numOfSec == (uint8_t)0xff)
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	2bff      	cmp	r3, #255	; 0xff
 8000d82:	d102      	bne.n	8000d8a <excuteFlashErase+0x32>
		{
			flashEraseHandle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000d84:	2301      	movs	r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	e012      	b.n	8000db0 <excuteFlashErase+0x58>
		}
		else
		{
			//Here need to calculate how many sector wants to erase
		    uint8_t remainigSec = 8 - secNum;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f1c3 0308 	rsb	r3, r3, #8
 8000d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		    if(numOfSec > remainigSec)
 8000d94:	79ba      	ldrb	r2, [r7, #6]
 8000d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d902      	bls.n	8000da4 <excuteFlashErase+0x4c>
		    {
		    	numOfSec = remainigSec;
 8000d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000da2:	71bb      	strb	r3, [r7, #6]
		    }
		    flashEraseHandle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
		    flashEraseHandle.Sector = secNum;
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	61bb      	str	r3, [r7, #24]
		    flashEraseHandle.NbSectors = numOfSec;
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	61fb      	str	r3, [r7, #28]
		}
		flashEraseHandle.Banks = FLASH_BANK_1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]

		//Get access to flash
		HAL_FLASH_Unlock();
 8000db4:	f000 fdf8 	bl	80019a8 <HAL_FLASH_Unlock>
		flashEraseHandle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000db8:	2302      	movs	r3, #2
 8000dba:	623b      	str	r3, [r7, #32]
		status = (uint8_t)HAL_FLASHEx_Erase(&flashEraseHandle, &sectorError);
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 ff8c 	bl	8001ce4 <HAL_FLASHEx_Erase>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8000dd2:	f000 fe0b 	bl	80019ec <HAL_FLASH_Lock>

		return status;
 8000dd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dda:	e000      	b.n	8000dde <excuteFlashErase+0x86>
	}

	return INVALID_SECTOR;
 8000ddc:	2304      	movs	r3, #4

}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <excuteMemWrite>:

uint8_t excuteMemWrite(uint8_t *pBuff,uint32_t memAddr,uint32_t len)
{
 8000de6:	b5b0      	push	{r4, r5, r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  uint8_t status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	75fb      	strb	r3, [r7, #23]
  //get access to flash by unlocking its registers
  HAL_FLASH_Unlock();
 8000df6:	f000 fdd7 	bl	80019a8 <HAL_FLASH_Unlock>
  for(uint32_t i = 0; i < len; i++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	e014      	b.n	8000e2a <excuteMemWrite+0x44>
  {
	  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,memAddr + i,pBuff[i]);
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	18d1      	adds	r1, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	461c      	mov	r4, r3
 8000e14:	4615      	mov	r5, r2
 8000e16:	4622      	mov	r2, r4
 8000e18:	462b      	mov	r3, r5
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 fd70 	bl	8001900 <HAL_FLASH_Program>
 8000e20:	4603      	mov	r3, r0
 8000e22:	75fb      	strb	r3, [r7, #23]
  for(uint32_t i = 0; i < len; i++)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3301      	adds	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3e6      	bcc.n	8000e00 <excuteMemWrite+0x1a>
  }
  HAL_FLASH_Lock();
 8000e32:	f000 fddb 	bl	80019ec <HAL_FLASH_Lock>
  return status;debugMsg("Invalid CRC\r\n");
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bdb0      	pop	{r4, r5, r7, pc}

08000e40 <readOBRProtectionStatus>:
	uint8_t ret;
		return ret;
}

uint16_t readOBRProtectionStatus(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
	//this structure is give by ST flash driver to hold the OB(Option Byte) contents....
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock OB memory access
	HAL_FLASH_OB_Unlock();
 8000e46:	f000 fde1 	bl	8001a0c <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 ffbb 	bl	8001dc8 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_OB_Lock();
 8000e52:	f000 fdf7 	bl	8001a44 <HAL_FLASH_OB_Lock>

	return (uint16_t)OBInit.WRPSector;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	b29b      	uxth	r3, r3
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <debugMsg>:

void debugMsg(char *format,...)
{
 8000e64:	b40f      	push	{r0, r1, r2, r3}
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b096      	sub	sp, #88	; 0x58
 8000e6a:	af00      	add	r7, sp, #0
	char str[80];

	va_list args;
	va_start(args,format);
 8000e6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e70:	607b      	str	r3, [r7, #4]
	vsprintf(str,format,args);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fc04 	bl	8003688 <vsiprintf>
	HAL_UART_Transmit(DEBUG_UART,(uint8_t *)str,strlen(str),HAL_MAX_DELAY);
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9b3 	bl	80001f0 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	f107 0108 	add.w	r1, r7, #8
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <debugMsg+0x48>)
 8000e98:	f001 ff97 	bl	8002dca <HAL_UART_Transmit>
	va_end(args);
}
 8000e9c:	bf00      	nop
 8000e9e:	3758      	adds	r7, #88	; 0x58
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ea6:	b004      	add	sp, #16
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200001a8 	.word	0x200001a8

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f000 fb86 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f820 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 f8e6 	bl	800108c <MX_GPIO_Init>
  MX_CRC_Init();
 8000ec0:	f000 f87c 	bl	8000fbc <MX_CRC_Init>
  MX_UART4_Init();
 8000ec4:	f000 f88e 	bl	8000fe4 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8000ec8:	f000 f8b6 	bl	8001038 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin))
 8000ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <main+0x44>)
 8000ed2:	f001 fa63 	bl	800239c <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <main+0x38>
  //if(1)
  {
	  debugMsg("Button Pressed\r\n");
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <main+0x48>)
 8000ede:	f7ff ffc1 	bl	8000e64 <debugMsg>
	  blUartReadData();
 8000ee2:	f7ff fb5f 	bl	80005a4 <blUartReadData>
 8000ee6:	e001      	b.n	8000eec <main+0x3c>
  }
  else
  {
	  blJumpUserAppl();
 8000ee8:	f7ff fbd6 	bl	8000698 <blJumpUserAppl>
 8000eec:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	080041fc 	.word	0x080041fc

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	2230      	movs	r2, #48	; 0x30
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fb9e 	bl	800364c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <SystemClock_Config+0xb8>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <SystemClock_Config+0xb8>)
 8000f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <SystemClock_Config+0xb8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <SystemClock_Config+0xbc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <SystemClock_Config+0xbc>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <SystemClock_Config+0xbc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	2301      	movs	r3, #1
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f64:	2310      	movs	r3, #16
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0320 	add.w	r3, r7, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fa45 	bl	8002400 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f7c:	f000 f996 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f001 fca7 	bl	80028f0 <HAL_RCC_ClockConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000fa8:	f000 f980 	bl	80012ac <Error_Handler>
  }
}
 8000fac:	bf00      	nop
 8000fae:	3750      	adds	r7, #80	; 0x50
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40007000 	.word	0x40007000

08000fbc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_CRC_Init+0x20>)
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <MX_CRC_Init+0x24>)
 8000fc4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_CRC_Init+0x20>)
 8000fc8:	f000 fc53 	bl	8001872 <HAL_CRC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000fd2:	f000 f96b 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000015c 	.word	0x2000015c
 8000fe0:	40023000 	.word	0x40023000

08000fe4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_UART4_Init+0x4c>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <MX_UART4_Init+0x50>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_UART4_Init+0x4c>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_UART4_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_UART4_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <MX_UART4_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_UART4_Init+0x4c>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <MX_UART4_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_UART4_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_UART4_Init+0x4c>)
 800101c:	f001 fe88 	bl	8002d30 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001026:	f000 f941 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000164 	.word	0x20000164
 8001034:	40004c00 	.word	0x40004c00

08001038 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_USART3_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART3_UART_Init+0x4c>)
 8001070:	f001 fe5e 	bl	8002d30 <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f000 f917 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200001a8 	.word	0x200001a8
 8001088:	40004800 	.word	0x40004800

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
 80010a6:	4b7c      	ldr	r3, [pc, #496]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a7b      	ldr	r2, [pc, #492]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b79      	ldr	r3, [pc, #484]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	4b75      	ldr	r3, [pc, #468]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a74      	ldr	r2, [pc, #464]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b72      	ldr	r3, [pc, #456]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b6e      	ldr	r3, [pc, #440]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a6d      	ldr	r2, [pc, #436]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b6b      	ldr	r3, [pc, #428]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <MX_GPIO_Init+0x20c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a66      	ldr	r2, [pc, #408]	; (8001298 <MX_GPIO_Init+0x20c>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b64      	ldr	r3, [pc, #400]	; (8001298 <MX_GPIO_Init+0x20c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	4b60      	ldr	r3, [pc, #384]	; (8001298 <MX_GPIO_Init+0x20c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a5f      	ldr	r2, [pc, #380]	; (8001298 <MX_GPIO_Init+0x20c>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <MX_GPIO_Init+0x20c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b59      	ldr	r3, [pc, #356]	; (8001298 <MX_GPIO_Init+0x20c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a58      	ldr	r2, [pc, #352]	; (8001298 <MX_GPIO_Init+0x20c>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b56      	ldr	r3, [pc, #344]	; (8001298 <MX_GPIO_Init+0x20c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001150:	4852      	ldr	r0, [pc, #328]	; (800129c <MX_GPIO_Init+0x210>)
 8001152:	f001 f93b 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	4851      	ldr	r0, [pc, #324]	; (80012a0 <MX_GPIO_Init+0x214>)
 800115c:	f001 f936 	bl	80023cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	484b      	ldr	r0, [pc, #300]	; (80012a4 <MX_GPIO_Init+0x218>)
 8001178:	f000 ff64 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800117c:	2332      	movs	r3, #50	; 0x32
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118c:	230b      	movs	r3, #11
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4843      	ldr	r0, [pc, #268]	; (80012a4 <MX_GPIO_Init+0x218>)
 8001198:	f000 ff54 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800119c:	2386      	movs	r3, #134	; 0x86
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ac:	230b      	movs	r3, #11
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	483c      	ldr	r0, [pc, #240]	; (80012a8 <MX_GPIO_Init+0x21c>)
 80011b8:	f000 ff44 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4831      	ldr	r0, [pc, #196]	; (800129c <MX_GPIO_Init+0x210>)
 80011d6:	f000 ff35 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ec:	230b      	movs	r3, #11
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4829      	ldr	r0, [pc, #164]	; (800129c <MX_GPIO_Init+0x210>)
 80011f8:	f000 ff24 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011fc:	2340      	movs	r3, #64	; 0x40
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4823      	ldr	r0, [pc, #140]	; (80012a0 <MX_GPIO_Init+0x214>)
 8001214:	f000 ff16 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	481d      	ldr	r0, [pc, #116]	; (80012a0 <MX_GPIO_Init+0x214>)
 800122c:	f000 ff0a 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001230:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001242:	230a      	movs	r3, #10
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4816      	ldr	r0, [pc, #88]	; (80012a8 <MX_GPIO_Init+0x21c>)
 800124e:	f000 fef9 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001252:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4810      	ldr	r0, [pc, #64]	; (80012a8 <MX_GPIO_Init+0x21c>)
 8001268:	f000 feec 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800126c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127e:	230b      	movs	r3, #11
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_GPIO_Init+0x214>)
 800128a:	f000 fedb 	bl	8002044 <HAL_GPIO_Init>

}
 800128e:	bf00      	nop
 8001290:	3730      	adds	r7, #48	; 0x30
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40020400 	.word	0x40020400
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020000 	.word	0x40020000

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>
	...

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <HAL_MspInit+0x4c>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_MspInit+0x4c>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_MspInit+0x4c>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_MspInit+0x4c>)
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800

08001308 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_CRC_MspInit+0x3c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10d      	bne.n	8001336 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_CRC_MspInit+0x40>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_CRC_MspInit+0x40>)
 8001324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_CRC_MspInit+0x40>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023000 	.word	0x40023000
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a42      	ldr	r2, [pc, #264]	; (8001474 <HAL_UART_MspInit+0x128>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d14b      	bne.n	8001406 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a40      	ldr	r2, [pc, #256]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a39      	ldr	r2, [pc, #228]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <HAL_UART_MspInit+0x12c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_UART_MspInit+0x12c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <HAL_UART_MspInit+0x12c>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_UART_MspInit+0x12c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013d2:	2308      	movs	r3, #8
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4827      	ldr	r0, [pc, #156]	; (800147c <HAL_UART_MspInit+0x130>)
 80013de:	f000 fe31 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013f4:	2308      	movs	r3, #8
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4820      	ldr	r0, [pc, #128]	; (8001480 <HAL_UART_MspInit+0x134>)
 8001400:	f000 fe20 	bl	8002044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001404:	e031      	b.n	800146a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_UART_MspInit+0x138>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d12c      	bne.n	800146a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_UART_MspInit+0x12c>)
 800141a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_UART_MspInit+0x12c>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_UART_MspInit+0x12c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001448:	f44f 7340 	mov.w	r3, #768	; 0x300
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800145a:	2307      	movs	r3, #7
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <HAL_UART_MspInit+0x13c>)
 8001466:	f000 fded 	bl	8002044 <HAL_GPIO_Init>
}
 800146a:	bf00      	nop
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40004c00 	.word	0x40004c00
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020800 	.word	0x40020800
 8001484:	40004800 	.word	0x40004800
 8001488:	40020c00 	.word	0x40020c00

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f8c6 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <_sbrk+0x5c>)
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <_sbrk+0x60>)
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x64>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <_sbrk+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <_sbrk+0x64>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d207      	bcs.n	8001520 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001510:	f002 f872 	bl	80035f8 <__errno>
 8001514:	4603      	mov	r3, r0
 8001516:	220c      	movs	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	e009      	b.n	8001534 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <_sbrk+0x64>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <_sbrk+0x64>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <_sbrk+0x64>)
 8001530:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20030000 	.word	0x20030000
 8001540:	00000400 	.word	0x00000400
 8001544:	200001ec 	.word	0x200001ec
 8001548:	20000228 	.word	0x20000228

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <SystemInit+0x20>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <SystemInit+0x20>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001576:	490e      	ldr	r1, [pc, #56]	; (80015b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001578:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800158c:	4c0b      	ldr	r4, [pc, #44]	; (80015bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159a:	f7ff ffd7 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f002 f831 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff fc85 	bl	8000eb0 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80015b4:	0800426c 	.word	0x0800426c
  ldr r2, =_sbss
 80015b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80015bc:	20000224 	.word	0x20000224

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	; (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f90d 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fe5e 	bl	80012b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f917 	bl	800185a <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f8ed 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	; (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000008 	.word	0x20000008
 8001660:	20000010 	.word	0x20000010
 8001664:	2000000c 	.word	0x2000000c

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000010 	.word	0x20000010
 800168c:	200001f0 	.word	0x200001f0

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200001f0 	.word	0x200001f0

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff47 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff5c 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff8e 	bl	8001760 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffb0 	bl	80017c8 <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e00e      	b.n	80018a2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	795b      	ldrb	r3, [r3, #5]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fd37 	bl	8001308 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2202      	movs	r2, #2
 80018be:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e00a      	b.n	80018dc <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	441a      	add	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3301      	adds	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d3f0      	bcc.n	80018c6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80018f2:	693b      	ldr	r3, [r7, #16]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_FLASH_Program+0xa0>)
 8001914:	7e1b      	ldrb	r3, [r3, #24]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_FLASH_Program+0x1e>
 800191a:	2302      	movs	r3, #2
 800191c:	e03b      	b.n	8001996 <HAL_FLASH_Program+0x96>
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_FLASH_Program+0xa0>)
 8001920:	2201      	movs	r2, #1
 8001922:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001928:	f000 f89c 	bl	8001a64 <FLASH_WaitForLastOperation>
 800192c:	4603      	mov	r3, r0
 800192e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d12b      	bne.n	800198e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800193c:	783b      	ldrb	r3, [r7, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	68b8      	ldr	r0, [r7, #8]
 8001942:	f000 f947 	bl	8001bd4 <FLASH_Program_Byte>
 8001946:	e016      	b.n	8001976 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800194e:	883b      	ldrh	r3, [r7, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	68b8      	ldr	r0, [r7, #8]
 8001954:	f000 f91a 	bl	8001b8c <FLASH_Program_HalfWord>
 8001958:	e00d      	b.n	8001976 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d105      	bne.n	800196c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4619      	mov	r1, r3
 8001964:	68b8      	ldr	r0, [r7, #8]
 8001966:	f000 f8ef 	bl	8001b48 <FLASH_Program_Word>
 800196a:	e004      	b.n	8001976 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800196c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	f000 f8b7 	bl	8001ae4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001976:	f24c 3050 	movw	r0, #50000	; 0xc350
 800197a:	f000 f873 	bl	8001a64 <FLASH_WaitForLastOperation>
 800197e:	4603      	mov	r3, r0
 8001980:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_FLASH_Program+0xa4>)
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_FLASH_Program+0xa4>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <HAL_FLASH_Program+0xa0>)
 8001990:	2200      	movs	r2, #0
 8001992:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001994:	7dfb      	ldrb	r3, [r7, #23]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001f4 	.word	0x200001f4
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_FLASH_Unlock+0x38>)
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0b      	bge.n	80019d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_FLASH_Unlock+0x38>)
 80019bc:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_FLASH_Unlock+0x3c>)
 80019be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_FLASH_Unlock+0x38>)
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_FLASH_Unlock+0x40>)
 80019c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_FLASH_Unlock+0x38>)
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da01      	bge.n	80019d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	45670123 	.word	0x45670123
 80019e8:	cdef89ab 	.word	0xcdef89ab

080019ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_FLASH_Lock+0x1c>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_FLASH_Lock+0x1c>)
 80019f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019fa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_FLASH_OB_Unlock+0x30>)
 8001a20:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_FLASH_OB_Unlock+0x2c>)
 8001a24:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <HAL_FLASH_OB_Unlock+0x34>)
 8001a26:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40023c00 	.word	0x40023c00
 8001a3c:	08192a3b 	.word	0x08192a3b
 8001a40:	4c5d6e7f 	.word	0x4c5d6e7f

08001a44 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_FLASH_OB_Lock+0x1c>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_FLASH_OB_Lock+0x1c>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <FLASH_WaitForLastOperation+0x78>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a76:	f7ff fe0b 	bl	8001690 <HAL_GetTick>
 8001a7a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a7c:	e010      	b.n	8001aa0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d00c      	beq.n	8001aa0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <FLASH_WaitForLastOperation+0x38>
 8001a8c:	f7ff fe00 	bl	8001690 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d201      	bcs.n	8001aa0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e019      	b.n	8001ad4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <FLASH_WaitForLastOperation+0x7c>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1e8      	bne.n	8001a7e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <FLASH_WaitForLastOperation+0x7c>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <FLASH_WaitForLastOperation+0x7c>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <FLASH_WaitForLastOperation+0x7c>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001aca:	f000 f8a5 	bl	8001c18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
  
}  
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200001f4 	.word	0x200001f4
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <FLASH_Program_DoubleWord+0x60>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <FLASH_Program_DoubleWord+0x60>)
 8001af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001afa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <FLASH_Program_DoubleWord+0x60>)
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <FLASH_Program_DoubleWord+0x60>)
 8001b02:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <FLASH_Program_DoubleWord+0x60>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <FLASH_Program_DoubleWord+0x60>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001b1a:	f3bf 8f6f 	isb	sy
}
 8001b1e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	2300      	movs	r3, #0
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	3104      	adds	r1, #4
 8001b34:	4613      	mov	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <FLASH_Program_Word+0x40>)
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	4a0c      	ldr	r2, [pc, #48]	; (8001b88 <FLASH_Program_Word+0x40>)
 8001b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <FLASH_Program_Word+0x40>)
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <FLASH_Program_Word+0x40>)
 8001b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <FLASH_Program_Word+0x40>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <FLASH_Program_Word+0x40>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <FLASH_Program_HalfWord+0x44>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <FLASH_Program_HalfWord+0x44>)
 8001b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <FLASH_Program_HalfWord+0x44>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <FLASH_Program_HalfWord+0x44>)
 8001baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <FLASH_Program_HalfWord+0x44>)
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <FLASH_Program_HalfWord+0x44>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	801a      	strh	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <FLASH_Program_Byte+0x40>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <FLASH_Program_Byte+0x40>)
 8001be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <FLASH_Program_Byte+0x40>)
 8001bee:	4a09      	ldr	r2, [pc, #36]	; (8001c14 <FLASH_Program_Byte+0x40>)
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <FLASH_Program_Byte+0x40>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	4a06      	ldr	r2, [pc, #24]	; (8001c14 <FLASH_Program_Byte+0x40>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	701a      	strb	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c28:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001c32:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c36:	2210      	movs	r2, #16
 8001c38:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001c50:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c54:	2220      	movs	r2, #32
 8001c56:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001c58:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001c6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001c70:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001c8c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	4a0d      	ldr	r2, [pc, #52]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001caa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cb2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <FLASH_SetErrorCode+0xc8>)
 8001cca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <FLASH_SetErrorCode+0xc4>)
 8001cce:	2202      	movs	r2, #2
 8001cd0:	60da      	str	r2, [r3, #12]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40023c00 	.word	0x40023c00
 8001ce0:	200001f4 	.word	0x200001f4

08001ce4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001cf6:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_FLASHEx_Erase+0xdc>)
 8001cf8:	7e1b      	ldrb	r3, [r3, #24]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_FLASHEx_Erase+0x1e>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e05a      	b.n	8001db8 <HAL_FLASHEx_Erase+0xd4>
 8001d02:	4b2f      	ldr	r3, [pc, #188]	; (8001dc0 <HAL_FLASHEx_Erase+0xdc>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d0c:	f7ff feaa 	bl	8001a64 <FLASH_WaitForLastOperation>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d14a      	bne.n	8001db0 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d117      	bne.n	8001d5a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f000 f86a 	bl	8001e10 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d40:	f7ff fe90 	bl	8001a64 <FLASH_WaitForLastOperation>
 8001d44:	4603      	mov	r3, r0
 8001d46:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_FLASHEx_Erase+0xe0>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <HAL_FLASHEx_Erase+0xe0>)
 8001d4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d52:	f023 0304 	bic.w	r3, r3, #4
 8001d56:	6113      	str	r3, [r2, #16]
 8001d58:	e028      	b.n	8001dac <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	e01c      	b.n	8001d9c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4619      	mov	r1, r3
 8001d6a:	68b8      	ldr	r0, [r7, #8]
 8001d6c:	f000 f88a 	bl	8001e84 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d74:	f7ff fe76 	bl	8001a64 <FLASH_WaitForLastOperation>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_FLASHEx_Erase+0xe0>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_FLASHEx_Erase+0xe0>)
 8001d82:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001d86:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	601a      	str	r2, [r3, #0]
          break;
 8001d94:	e00a      	b.n	8001dac <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	4413      	add	r3, r2
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3da      	bcc.n	8001d62 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001dac:	f000 f904 	bl	8001fb8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_FLASHEx_Erase+0xdc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	761a      	strb	r2, [r3, #24]

  return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200001f4 	.word	0x200001f4
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001dd6:	f000 f8b3 	bl	8001f40 <FLASH_OB_GetWRP>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001de2:	f000 f8b9 	bl	8001f58 <FLASH_OB_GetRDP>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001dee:	f000 f897 	bl	8001f20 <FLASH_OB_GetUser>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001dfa:	f000 f8cd 	bl	8001f98 <FLASH_OB_GetBOR>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461a      	mov	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	615a      	str	r2, [r3, #20]
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e26:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d108      	bne.n	8001e40 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6113      	str	r3, [r2, #16]
 8001e3e:	e00f      	b.n	8001e60 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d106      	bne.n	8001e54 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	6113      	str	r3, [r2, #16]
 8001e52:	e005      	b.n	8001e60 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <FLASH_MassErase+0x70>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6113      	str	r3, [r2, #16]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	e010      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d103      	bne.n	8001eae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e009      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d103      	bne.n	8001ebc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e002      	b.n	8001ec2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0b      	cmp	r3, #11
 8001ec6:	d902      	bls.n	8001ece <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	490f      	ldr	r1, [pc, #60]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001eec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ef0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001efe:	f043 0302 	orr.w	r3, r3, #2
 8001f02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <FLASH_Erase_Sector+0x98>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	6113      	str	r3, [r2, #16]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <FLASH_OB_GetUser+0x1c>)
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f023 031f 	bic.w	r3, r3, #31
 8001f2e:	b2db      	uxtb	r3, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40023c00 	.word	0x40023c00

08001f40 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <FLASH_OB_GetWRP+0x14>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40023c16 	.word	0x40023c16

08001f58 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001f5e:	23aa      	movs	r3, #170	; 0xaa
 8001f60:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <FLASH_OB_GetRDP+0x3c>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2bcc      	cmp	r3, #204	; 0xcc
 8001f6a:	d102      	bne.n	8001f72 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001f6c:	23cc      	movs	r3, #204	; 0xcc
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	e009      	b.n	8001f86 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <FLASH_OB_GetRDP+0x3c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2baa      	cmp	r3, #170	; 0xaa
 8001f7a:	d102      	bne.n	8001f82 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001f7c:	23aa      	movs	r3, #170	; 0xaa
 8001f7e:	71fb      	strb	r3, [r7, #7]
 8001f80:	e001      	b.n	8001f86 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8001f82:	2355      	movs	r3, #85	; 0x55
 8001f84:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001f86:	79fb      	ldrb	r3, [r7, #7]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	40023c15 	.word	0x40023c15

08001f98 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <FLASH_OB_GetBOR+0x1c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	b2db      	uxtb	r3, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023c14 	.word	0x40023c14

08001fb8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d017      	beq.n	8001ff8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001fce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fd2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001fda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a16      	ldr	r2, [pc, #88]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <FLASH_FlushCaches+0x88>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002000:	2b00      	cmp	r3, #0
 8002002:	d017      	beq.n	8002034 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <FLASH_FlushCaches+0x88>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <FLASH_FlushCaches+0x88>)
 800200a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800200e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <FLASH_FlushCaches+0x88>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <FLASH_FlushCaches+0x88>)
 8002016:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <FLASH_FlushCaches+0x88>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <FLASH_FlushCaches+0x88>)
 8002022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002026:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <FLASH_FlushCaches+0x88>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <FLASH_FlushCaches+0x88>)
 800202e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002032:	6013      	str	r3, [r2, #0]
  }
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40023c00 	.word	0x40023c00

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e177      	b.n	8002350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8166 	bne.w	800234a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80c0 	beq.w	800234a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b66      	ldr	r3, [pc, #408]	; (8002368 <HAL_GPIO_Init+0x324>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_GPIO_Init+0x324>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b63      	ldr	r3, [pc, #396]	; (8002368 <HAL_GPIO_Init+0x324>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a61      	ldr	r2, [pc, #388]	; (800236c <HAL_GPIO_Init+0x328>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a58      	ldr	r2, [pc, #352]	; (8002370 <HAL_GPIO_Init+0x32c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d037      	beq.n	8002282 <HAL_GPIO_Init+0x23e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a57      	ldr	r2, [pc, #348]	; (8002374 <HAL_GPIO_Init+0x330>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d031      	beq.n	800227e <HAL_GPIO_Init+0x23a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_GPIO_Init+0x334>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d02b      	beq.n	800227a <HAL_GPIO_Init+0x236>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a55      	ldr	r2, [pc, #340]	; (800237c <HAL_GPIO_Init+0x338>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d025      	beq.n	8002276 <HAL_GPIO_Init+0x232>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a54      	ldr	r2, [pc, #336]	; (8002380 <HAL_GPIO_Init+0x33c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01f      	beq.n	8002272 <HAL_GPIO_Init+0x22e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a53      	ldr	r2, [pc, #332]	; (8002384 <HAL_GPIO_Init+0x340>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d019      	beq.n	800226e <HAL_GPIO_Init+0x22a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_GPIO_Init+0x344>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <HAL_GPIO_Init+0x226>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a51      	ldr	r2, [pc, #324]	; (800238c <HAL_GPIO_Init+0x348>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00d      	beq.n	8002266 <HAL_GPIO_Init+0x222>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a50      	ldr	r2, [pc, #320]	; (8002390 <HAL_GPIO_Init+0x34c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d007      	beq.n	8002262 <HAL_GPIO_Init+0x21e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <HAL_GPIO_Init+0x350>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d101      	bne.n	800225e <HAL_GPIO_Init+0x21a>
 800225a:	2309      	movs	r3, #9
 800225c:	e012      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800225e:	230a      	movs	r3, #10
 8002260:	e010      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002262:	2308      	movs	r3, #8
 8002264:	e00e      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002266:	2307      	movs	r3, #7
 8002268:	e00c      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800226a:	2306      	movs	r3, #6
 800226c:	e00a      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800226e:	2305      	movs	r3, #5
 8002270:	e008      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002272:	2304      	movs	r3, #4
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002276:	2303      	movs	r3, #3
 8002278:	e004      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800227a:	2302      	movs	r3, #2
 800227c:	e002      	b.n	8002284 <HAL_GPIO_Init+0x240>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x240>
 8002282:	2300      	movs	r3, #0
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f002 0203 	and.w	r2, r2, #3
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	4093      	lsls	r3, r2
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002294:	4935      	ldr	r1, [pc, #212]	; (800236c <HAL_GPIO_Init+0x328>)
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c6:	4a34      	ldr	r2, [pc, #208]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f0:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022f6:	4b28      	ldr	r3, [pc, #160]	; (8002398 <HAL_GPIO_Init+0x354>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231a:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <HAL_GPIO_Init+0x354>)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_GPIO_Init+0x354>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_GPIO_Init+0x354>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3301      	adds	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b0f      	cmp	r3, #15
 8002354:	f67f ae84 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40013800 	.word	0x40013800
 8002370:	40020000 	.word	0x40020000
 8002374:	40020400 	.word	0x40020400
 8002378:	40020800 	.word	0x40020800
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40021000 	.word	0x40021000
 8002384:	40021400 	.word	0x40021400
 8002388:	40021800 	.word	0x40021800
 800238c:	40021c00 	.word	0x40021c00
 8002390:	40022000 	.word	0x40022000
 8002394:	40022400 	.word	0x40022400
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	807b      	strh	r3, [r7, #2]
 80023d8:	4613      	mov	r3, r2
 80023da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023dc:	787b      	ldrb	r3, [r7, #1]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e8:	e003      	b.n	80023f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ea:	887b      	ldrh	r3, [r7, #2]
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	619a      	str	r2, [r3, #24]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e267      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d075      	beq.n	800250a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241e:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b04      	cmp	r3, #4
 8002428:	d00c      	beq.n	8002444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b85      	ldr	r3, [pc, #532]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002432:	2b08      	cmp	r3, #8
 8002434:	d112      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002436:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002442:	d10b      	bne.n	800245c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	4b7e      	ldr	r3, [pc, #504]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d05b      	beq.n	8002508 <HAL_RCC_OscConfig+0x108>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d157      	bne.n	8002508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e242      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002464:	d106      	bne.n	8002474 <HAL_RCC_OscConfig+0x74>
 8002466:	4b76      	ldr	r3, [pc, #472]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a75      	ldr	r2, [pc, #468]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e01d      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x98>
 800247e:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6f      	ldr	r2, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b6d      	ldr	r3, [pc, #436]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6c      	ldr	r2, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0xb0>
 8002498:	4b69      	ldr	r3, [pc, #420]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a68      	ldr	r2, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b66      	ldr	r3, [pc, #408]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a65      	ldr	r2, [pc, #404]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d013      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff f8ea 	bl	8001690 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f8e6 	bl	8001690 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e207      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0xc0>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff f8d6 	bl	8001690 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff f8d2 	bl	8001690 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e1f3      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	4b51      	ldr	r3, [pc, #324]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0xe8>
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d063      	beq.n	80025de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002516:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b47      	ldr	r3, [pc, #284]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252a:	2b08      	cmp	r3, #8
 800252c:	d11c      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252e:	4b44      	ldr	r3, [pc, #272]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d001      	beq.n	8002552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e1c7      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4937      	ldr	r1, [pc, #220]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	e03a      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_RCC_OscConfig+0x244>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002576:	f7ff f88b 	bl	8001690 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257e:	f7ff f887 	bl	8001690 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e1a8      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b28      	ldr	r3, [pc, #160]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4925      	ldr	r1, [pc, #148]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_OscConfig+0x244>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff f86a 	bl	8001690 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025c0:	f7ff f866 	bl	8001690 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e187      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d036      	beq.n	8002658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_RCC_OscConfig+0x248>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff f84a 	bl	8001690 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff f846 	bl	8001690 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e167      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x240>)
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x200>
 800261e:	e01b      	b.n	8002658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_OscConfig+0x248>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002626:	f7ff f833 	bl	8001690 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262c:	e00e      	b.n	800264c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262e:	f7ff f82f 	bl	8001690 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d907      	bls.n	800264c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e150      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
 8002640:	40023800 	.word	0x40023800
 8002644:	42470000 	.word	0x42470000
 8002648:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b88      	ldr	r3, [pc, #544]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ea      	bne.n	800262e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8097 	beq.w	8002794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b81      	ldr	r3, [pc, #516]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b7d      	ldr	r3, [pc, #500]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	4a7c      	ldr	r2, [pc, #496]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
 8002686:	4b7a      	ldr	r3, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b77      	ldr	r3, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x474>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b74      	ldr	r3, [pc, #464]	; (8002874 <HAL_RCC_OscConfig+0x474>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a73      	ldr	r2, [pc, #460]	; (8002874 <HAL_RCC_OscConfig+0x474>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7fe ffef 	bl	8001690 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe ffeb 	bl	8001690 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e10c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_OscConfig+0x474>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x2ea>
 80026dc:	4b64      	ldr	r3, [pc, #400]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a63      	ldr	r2, [pc, #396]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	e01c      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x30c>
 80026f2:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a5e      	ldr	r2, [pc, #376]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	4a5b      	ldr	r2, [pc, #364]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6713      	str	r3, [r2, #112]	; 0x70
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
 800270c:	4b58      	ldr	r3, [pc, #352]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a57      	ldr	r2, [pc, #348]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b55      	ldr	r3, [pc, #340]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a54      	ldr	r2, [pc, #336]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800271e:	f023 0304 	bic.w	r3, r3, #4
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe ffb0 	bl	8001690 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe ffac 	bl	8001690 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0cb      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ee      	beq.n	8002734 <HAL_RCC_OscConfig+0x334>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002758:	f7fe ff9a 	bl	8001690 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe ff96 	bl	8001690 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0b5      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b39      	ldr	r3, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	4a38      	ldr	r2, [pc, #224]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002792:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a1 	beq.w	80028e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d05c      	beq.n	8002864 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d141      	bne.n	8002836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b2:	4b31      	ldr	r3, [pc, #196]	; (8002878 <HAL_RCC_OscConfig+0x478>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe ff6a 	bl	8001690 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe ff66 	bl	8001690 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e087      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	019b      	lsls	r3, r3, #6
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	491b      	ldr	r1, [pc, #108]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x478>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe ff3f 	bl	8001690 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe ff3b 	bl	8001690 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e05c      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x416>
 8002834:	e054      	b.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x478>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe ff28 	bl	8001690 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe ff24 	bl	8001690 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e045      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_OscConfig+0x470>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x444>
 8002862:	e03d      	b.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e038      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000
 8002878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x4ec>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d028      	beq.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d121      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d11a      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d111      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800

080028f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cc      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d90c      	bls.n	800292c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b65      	ldr	r3, [pc, #404]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0b8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d020      	beq.n	800297a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002944:	4b59      	ldr	r3, [pc, #356]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	4a58      	ldr	r2, [pc, #352]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800294e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a52      	ldr	r2, [pc, #328]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	4b50      	ldr	r3, [pc, #320]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	494d      	ldr	r1, [pc, #308]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d044      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b47      	ldr	r3, [pc, #284]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d119      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b3f      	ldr	r3, [pc, #252]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e067      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ce:	4b37      	ldr	r3, [pc, #220]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f023 0203 	bic.w	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4934      	ldr	r1, [pc, #208]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fe56 	bl	8001690 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e8:	f7fe fe52 	bl	8001690 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04f      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 020c 	and.w	r2, r3, #12
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1eb      	bne.n	80029e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d20c      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e032      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4916      	ldr	r1, [pc, #88]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	490e      	ldr	r1, [pc, #56]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f821 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490a      	ldr	r1, [pc, #40]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fdb6 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	08004210 	.word	0x08004210
 8002ab4:	20000008 	.word	0x20000008
 8002ab8:	2000000c 	.word	0x2000000c

08002abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac0:	b094      	sub	sp, #80	; 0x50
 8002ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002acc:	2300      	movs	r3, #0
 8002ace:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad4:	4b79      	ldr	r3, [pc, #484]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d00d      	beq.n	8002afc <HAL_RCC_GetSysClockFreq+0x40>
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	f200 80e1 	bhi.w	8002ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aee:	e0db      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002af4:	e0db      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af6:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002afa:	e0d8      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afc:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b06:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b12:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	099b      	lsrs	r3, r3, #6
 8002b18:	2200      	movs	r2, #0
 8002b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	633b      	str	r3, [r7, #48]	; 0x30
 8002b26:	2300      	movs	r3, #0
 8002b28:	637b      	str	r3, [r7, #52]	; 0x34
 8002b2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b2e:	4622      	mov	r2, r4
 8002b30:	462b      	mov	r3, r5
 8002b32:	f04f 0000 	mov.w	r0, #0
 8002b36:	f04f 0100 	mov.w	r1, #0
 8002b3a:	0159      	lsls	r1, r3, #5
 8002b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b40:	0150      	lsls	r0, r2, #5
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4621      	mov	r1, r4
 8002b48:	1a51      	subs	r1, r2, r1
 8002b4a:	6139      	str	r1, [r7, #16]
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b60:	4659      	mov	r1, fp
 8002b62:	018b      	lsls	r3, r1, #6
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	018a      	lsls	r2, r1, #6
 8002b6e:	4651      	mov	r1, sl
 8002b70:	ebb2 0801 	subs.w	r8, r2, r1
 8002b74:	4659      	mov	r1, fp
 8002b76:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b8e:	4690      	mov	r8, r2
 8002b90:	4699      	mov	r9, r3
 8002b92:	4623      	mov	r3, r4
 8002b94:	eb18 0303 	adds.w	r3, r8, r3
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	eb49 0303 	adc.w	r3, r9, r3
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bae:	4629      	mov	r1, r5
 8002bb0:	024b      	lsls	r3, r1, #9
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb8:	4621      	mov	r1, r4
 8002bba:	024a      	lsls	r2, r1, #9
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bcc:	f7fd fb68 	bl	80002a0 <__aeabi_uldivmod>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd8:	e058      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b38      	ldr	r3, [pc, #224]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	4611      	mov	r1, r2
 8002be6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	f04f 0000 	mov.w	r0, #0
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	0159      	lsls	r1, r3, #5
 8002c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c06:	0150      	lsls	r0, r2, #5
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4641      	mov	r1, r8
 8002c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c12:	4649      	mov	r1, r9
 8002c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c30:	eb63 050b 	sbc.w	r5, r3, fp
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	00eb      	lsls	r3, r5, #3
 8002c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c42:	00e2      	lsls	r2, r4, #3
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
 8002c48:	4643      	mov	r3, r8
 8002c4a:	18e3      	adds	r3, r4, r3
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	464b      	mov	r3, r9
 8002c50:	eb45 0303 	adc.w	r3, r5, r3
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	f04f 0300 	mov.w	r3, #0
 8002c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c62:	4629      	mov	r1, r5
 8002c64:	028b      	lsls	r3, r1, #10
 8002c66:	4621      	mov	r1, r4
 8002c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	028a      	lsls	r2, r1, #10
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	61fa      	str	r2, [r7, #28]
 8002c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c80:	f7fd fb0e 	bl	80002a0 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca6:	e002      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002caa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3750      	adds	r7, #80	; 0x50
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000008 	.word	0x20000008

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4903      	ldr	r1, [pc, #12]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08004220 	.word	0x08004220

08002d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d0c:	f7ff ffdc 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0b5b      	lsrs	r3, r3, #13
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08004220 	.word	0x08004220

08002d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e03f      	b.n	8002dc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe faf8 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f9cb 	bl	8003110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b08a      	sub	sp, #40	; 0x28
 8002dce:	af02      	add	r7, sp, #8
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d17c      	bne.n	8002ee4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_UART_Transmit+0x2c>
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e075      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_UART_Transmit+0x3e>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e06e      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2221      	movs	r2, #33	; 0x21
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fc37 	bl	8001690 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e38:	d108      	bne.n	8002e4c <HAL_UART_Transmit+0x82>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d104      	bne.n	8002e4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	e003      	b.n	8002e54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e5c:	e02a      	b.n	8002eb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f8e2 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e036      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	3302      	adds	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	e007      	b.n	8002ea6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1cf      	bne.n	8002e5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2140      	movs	r1, #64	; 0x40
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f8b2 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e006      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08a      	sub	sp, #40	; 0x28
 8002ef2:	af02      	add	r7, sp, #8
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	f040 808c 	bne.w	8003028 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_UART_Receive+0x2e>
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e084      	b.n	800302a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Receive+0x40>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e07d      	b.n	800302a <HAL_UART_Receive+0x13c>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2222      	movs	r2, #34	; 0x22
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe fba1 	bl	8001690 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f64:	d108      	bne.n	8002f78 <HAL_UART_Receive+0x8a>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	e003      	b.n	8002f80 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f88:	e043      	b.n	8003012 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2120      	movs	r1, #32
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f84c 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e042      	b.n	800302a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10c      	bne.n	8002fc4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e01f      	b.n	8003004 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d007      	beq.n	8002fde <HAL_UART_Receive+0xf0>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_UART_Receive+0xfe>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e008      	b.n	8002ffe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3301      	adds	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1b6      	bne.n	8002f8a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b090      	sub	sp, #64	; 0x40
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	4613      	mov	r3, r2
 8003040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003042:	e050      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d04c      	beq.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800304c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <UART_WaitOnFlagUntilTimeout+0x30>
 8003052:	f7fe fb1d 	bl	8001690 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800305e:	429a      	cmp	r2, r3
 8003060:	d241      	bcs.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003082:	637a      	str	r2, [r7, #52]	; 0x34
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e5      	bne.n	8003062 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3314      	adds	r3, #20
 800309c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	613b      	str	r3, [r7, #16]
   return(result);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	3314      	adds	r3, #20
 80030b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030b6:	623a      	str	r2, [r7, #32]
 80030b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	69f9      	ldr	r1, [r7, #28]
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e5      	bne.n	8003096 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e00f      	b.n	8003106 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	429a      	cmp	r2, r3
 8003102:	d09f      	beq.n	8003044 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3740      	adds	r7, #64	; 0x40
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003114:	b0c0      	sub	sp, #256	; 0x100
 8003116:	af00      	add	r7, sp, #0
 8003118:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	68d9      	ldr	r1, [r3, #12]
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	ea40 0301 	orr.w	r3, r0, r1
 8003138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	431a      	orrs	r2, r3
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	431a      	orrs	r2, r3
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003168:	f021 010c 	bic.w	r1, r1, #12
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003176:	430b      	orrs	r3, r1
 8003178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318a:	6999      	ldr	r1, [r3, #24]
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	ea40 0301 	orr.w	r3, r0, r1
 8003196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b8f      	ldr	r3, [pc, #572]	; (80033dc <UART_SetConfig+0x2cc>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d005      	beq.n	80031b0 <UART_SetConfig+0xa0>
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b8d      	ldr	r3, [pc, #564]	; (80033e0 <UART_SetConfig+0x2d0>)
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d104      	bne.n	80031ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031b0:	f7ff fdaa 	bl	8002d08 <HAL_RCC_GetPCLK2Freq>
 80031b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031b8:	e003      	b.n	80031c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ba:	f7ff fd91 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 80031be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031cc:	f040 810c 	bne.w	80033e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031e2:	4622      	mov	r2, r4
 80031e4:	462b      	mov	r3, r5
 80031e6:	1891      	adds	r1, r2, r2
 80031e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80031ea:	415b      	adcs	r3, r3
 80031ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031f2:	4621      	mov	r1, r4
 80031f4:	eb12 0801 	adds.w	r8, r2, r1
 80031f8:	4629      	mov	r1, r5
 80031fa:	eb43 0901 	adc.w	r9, r3, r1
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800320a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800320e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003212:	4690      	mov	r8, r2
 8003214:	4699      	mov	r9, r3
 8003216:	4623      	mov	r3, r4
 8003218:	eb18 0303 	adds.w	r3, r8, r3
 800321c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003220:	462b      	mov	r3, r5
 8003222:	eb49 0303 	adc.w	r3, r9, r3
 8003226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003236:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800323a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800323e:	460b      	mov	r3, r1
 8003240:	18db      	adds	r3, r3, r3
 8003242:	653b      	str	r3, [r7, #80]	; 0x50
 8003244:	4613      	mov	r3, r2
 8003246:	eb42 0303 	adc.w	r3, r2, r3
 800324a:	657b      	str	r3, [r7, #84]	; 0x54
 800324c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003254:	f7fd f824 	bl	80002a0 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <UART_SetConfig+0x2d4>)
 800325e:	fba3 2302 	umull	r2, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	011c      	lsls	r4, r3, #4
 8003266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003270:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	1891      	adds	r1, r2, r2
 800327e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003280:	415b      	adcs	r3, r3
 8003282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003288:	4641      	mov	r1, r8
 800328a:	eb12 0a01 	adds.w	sl, r2, r1
 800328e:	4649      	mov	r1, r9
 8003290:	eb43 0b01 	adc.w	fp, r3, r1
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a8:	4692      	mov	sl, r2
 80032aa:	469b      	mov	fp, r3
 80032ac:	4643      	mov	r3, r8
 80032ae:	eb1a 0303 	adds.w	r3, sl, r3
 80032b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032b6:	464b      	mov	r3, r9
 80032b8:	eb4b 0303 	adc.w	r3, fp, r3
 80032bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032d4:	460b      	mov	r3, r1
 80032d6:	18db      	adds	r3, r3, r3
 80032d8:	643b      	str	r3, [r7, #64]	; 0x40
 80032da:	4613      	mov	r3, r2
 80032dc:	eb42 0303 	adc.w	r3, r2, r3
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
 80032e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032ea:	f7fc ffd9 	bl	80002a0 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <UART_SetConfig+0x2d4>)
 80032f6:	fba3 2301 	umull	r2, r3, r3, r1
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2264      	movs	r2, #100	; 0x64
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	1acb      	subs	r3, r1, r3
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800330a:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <UART_SetConfig+0x2d4>)
 800330c:	fba3 2302 	umull	r2, r3, r3, r2
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003318:	441c      	add	r4, r3
 800331a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800332c:	4642      	mov	r2, r8
 800332e:	464b      	mov	r3, r9
 8003330:	1891      	adds	r1, r2, r2
 8003332:	63b9      	str	r1, [r7, #56]	; 0x38
 8003334:	415b      	adcs	r3, r3
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800333c:	4641      	mov	r1, r8
 800333e:	1851      	adds	r1, r2, r1
 8003340:	6339      	str	r1, [r7, #48]	; 0x30
 8003342:	4649      	mov	r1, r9
 8003344:	414b      	adcs	r3, r1
 8003346:	637b      	str	r3, [r7, #52]	; 0x34
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003354:	4659      	mov	r1, fp
 8003356:	00cb      	lsls	r3, r1, #3
 8003358:	4651      	mov	r1, sl
 800335a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800335e:	4651      	mov	r1, sl
 8003360:	00ca      	lsls	r2, r1, #3
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	4603      	mov	r3, r0
 8003368:	4642      	mov	r2, r8
 800336a:	189b      	adds	r3, r3, r2
 800336c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003370:	464b      	mov	r3, r9
 8003372:	460a      	mov	r2, r1
 8003374:	eb42 0303 	adc.w	r3, r2, r3
 8003378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003388:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800338c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003390:	460b      	mov	r3, r1
 8003392:	18db      	adds	r3, r3, r3
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
 8003396:	4613      	mov	r3, r2
 8003398:	eb42 0303 	adc.w	r3, r2, r3
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033a6:	f7fc ff7b 	bl	80002a0 <__aeabi_uldivmod>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <UART_SetConfig+0x2d4>)
 80033b0:	fba3 1302 	umull	r1, r3, r3, r2
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	2164      	movs	r1, #100	; 0x64
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	3332      	adds	r3, #50	; 0x32
 80033c2:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <UART_SetConfig+0x2d4>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	f003 0207 	and.w	r2, r3, #7
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4422      	add	r2, r4
 80033d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033d8:	e105      	b.n	80035e6 <UART_SetConfig+0x4d6>
 80033da:	bf00      	nop
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40011400 	.word	0x40011400
 80033e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033fa:	4642      	mov	r2, r8
 80033fc:	464b      	mov	r3, r9
 80033fe:	1891      	adds	r1, r2, r2
 8003400:	6239      	str	r1, [r7, #32]
 8003402:	415b      	adcs	r3, r3
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800340a:	4641      	mov	r1, r8
 800340c:	1854      	adds	r4, r2, r1
 800340e:	4649      	mov	r1, r9
 8003410:	eb43 0501 	adc.w	r5, r3, r1
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	00eb      	lsls	r3, r5, #3
 800341e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003422:	00e2      	lsls	r2, r4, #3
 8003424:	4614      	mov	r4, r2
 8003426:	461d      	mov	r5, r3
 8003428:	4643      	mov	r3, r8
 800342a:	18e3      	adds	r3, r4, r3
 800342c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003430:	464b      	mov	r3, r9
 8003432:	eb45 0303 	adc.w	r3, r5, r3
 8003436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003456:	4629      	mov	r1, r5
 8003458:	008b      	lsls	r3, r1, #2
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003460:	4621      	mov	r1, r4
 8003462:	008a      	lsls	r2, r1, #2
 8003464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003468:	f7fc ff1a 	bl	80002a0 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4b60      	ldr	r3, [pc, #384]	; (80035f4 <UART_SetConfig+0x4e4>)
 8003472:	fba3 2302 	umull	r2, r3, r3, r2
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	011c      	lsls	r4, r3, #4
 800347a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	1891      	adds	r1, r2, r2
 8003492:	61b9      	str	r1, [r7, #24]
 8003494:	415b      	adcs	r3, r3
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800349c:	4641      	mov	r1, r8
 800349e:	1851      	adds	r1, r2, r1
 80034a0:	6139      	str	r1, [r7, #16]
 80034a2:	4649      	mov	r1, r9
 80034a4:	414b      	adcs	r3, r1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b4:	4659      	mov	r1, fp
 80034b6:	00cb      	lsls	r3, r1, #3
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034be:	4651      	mov	r1, sl
 80034c0:	00ca      	lsls	r2, r1, #3
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	4642      	mov	r2, r8
 80034ca:	189b      	adds	r3, r3, r2
 80034cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034d0:	464b      	mov	r3, r9
 80034d2:	460a      	mov	r2, r1
 80034d4:	eb42 0303 	adc.w	r3, r2, r3
 80034d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80034e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034f4:	4649      	mov	r1, r9
 80034f6:	008b      	lsls	r3, r1, #2
 80034f8:	4641      	mov	r1, r8
 80034fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034fe:	4641      	mov	r1, r8
 8003500:	008a      	lsls	r2, r1, #2
 8003502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003506:	f7fc fecb 	bl	80002a0 <__aeabi_uldivmod>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4b39      	ldr	r3, [pc, #228]	; (80035f4 <UART_SetConfig+0x4e4>)
 8003510:	fba3 1302 	umull	r1, r3, r3, r2
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	2164      	movs	r1, #100	; 0x64
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	3332      	adds	r3, #50	; 0x32
 8003522:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <UART_SetConfig+0x4e4>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352e:	441c      	add	r4, r3
 8003530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003534:	2200      	movs	r2, #0
 8003536:	673b      	str	r3, [r7, #112]	; 0x70
 8003538:	677a      	str	r2, [r7, #116]	; 0x74
 800353a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800353e:	4642      	mov	r2, r8
 8003540:	464b      	mov	r3, r9
 8003542:	1891      	adds	r1, r2, r2
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	415b      	adcs	r3, r3
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800354e:	4641      	mov	r1, r8
 8003550:	1851      	adds	r1, r2, r1
 8003552:	6039      	str	r1, [r7, #0]
 8003554:	4649      	mov	r1, r9
 8003556:	414b      	adcs	r3, r1
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003566:	4659      	mov	r1, fp
 8003568:	00cb      	lsls	r3, r1, #3
 800356a:	4651      	mov	r1, sl
 800356c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003570:	4651      	mov	r1, sl
 8003572:	00ca      	lsls	r2, r1, #3
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	4603      	mov	r3, r0
 800357a:	4642      	mov	r2, r8
 800357c:	189b      	adds	r3, r3, r2
 800357e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003580:	464b      	mov	r3, r9
 8003582:	460a      	mov	r2, r1
 8003584:	eb42 0303 	adc.w	r3, r2, r3
 8003588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	663b      	str	r3, [r7, #96]	; 0x60
 8003594:	667a      	str	r2, [r7, #100]	; 0x64
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035a2:	4649      	mov	r1, r9
 80035a4:	008b      	lsls	r3, r1, #2
 80035a6:	4641      	mov	r1, r8
 80035a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ac:	4641      	mov	r1, r8
 80035ae:	008a      	lsls	r2, r1, #2
 80035b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035b4:	f7fc fe74 	bl	80002a0 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <UART_SetConfig+0x4e4>)
 80035be:	fba3 1302 	umull	r1, r3, r3, r2
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2164      	movs	r1, #100	; 0x64
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	3332      	adds	r3, #50	; 0x32
 80035d0:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <UART_SetConfig+0x4e4>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	f003 020f 	and.w	r2, r3, #15
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4422      	add	r2, r4
 80035e4:	609a      	str	r2, [r3, #8]
}
 80035e6:	bf00      	nop
 80035e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035ec:	46bd      	mov	sp, r7
 80035ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035f2:	bf00      	nop
 80035f4:	51eb851f 	.word	0x51eb851f

080035f8 <__errno>:
 80035f8:	4b01      	ldr	r3, [pc, #4]	; (8003600 <__errno+0x8>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000014 	.word	0x20000014

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	4d0d      	ldr	r5, [pc, #52]	; (800363c <__libc_init_array+0x38>)
 8003608:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360a:	1b64      	subs	r4, r4, r5
 800360c:	10a4      	asrs	r4, r4, #2
 800360e:	2600      	movs	r6, #0
 8003610:	42a6      	cmp	r6, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	4d0b      	ldr	r5, [pc, #44]	; (8003644 <__libc_init_array+0x40>)
 8003616:	4c0c      	ldr	r4, [pc, #48]	; (8003648 <__libc_init_array+0x44>)
 8003618:	f000 fc8e 	bl	8003f38 <_init>
 800361c:	1b64      	subs	r4, r4, r5
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	2600      	movs	r6, #0
 8003622:	42a6      	cmp	r6, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f855 3b04 	ldr.w	r3, [r5], #4
 800362c:	4798      	blx	r3
 800362e:	3601      	adds	r6, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f855 3b04 	ldr.w	r3, [r5], #4
 8003636:	4798      	blx	r3
 8003638:	3601      	adds	r6, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	08004264 	.word	0x08004264
 8003640:	08004264 	.word	0x08004264
 8003644:	08004264 	.word	0x08004264
 8003648:	08004268 	.word	0x08004268

0800364c <memset>:
 800364c:	4402      	add	r2, r0
 800364e:	4603      	mov	r3, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	d100      	bne.n	8003656 <memset+0xa>
 8003654:	4770      	bx	lr
 8003656:	f803 1b01 	strb.w	r1, [r3], #1
 800365a:	e7f9      	b.n	8003650 <memset+0x4>

0800365c <_vsiprintf_r>:
 800365c:	b500      	push	{lr}
 800365e:	b09b      	sub	sp, #108	; 0x6c
 8003660:	9100      	str	r1, [sp, #0]
 8003662:	9104      	str	r1, [sp, #16]
 8003664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003668:	9105      	str	r1, [sp, #20]
 800366a:	9102      	str	r1, [sp, #8]
 800366c:	4905      	ldr	r1, [pc, #20]	; (8003684 <_vsiprintf_r+0x28>)
 800366e:	9103      	str	r1, [sp, #12]
 8003670:	4669      	mov	r1, sp
 8003672:	f000 f86f 	bl	8003754 <_svfiprintf_r>
 8003676:	9b00      	ldr	r3, [sp, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	b01b      	add	sp, #108	; 0x6c
 800367e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003682:	bf00      	nop
 8003684:	ffff0208 	.word	0xffff0208

08003688 <vsiprintf>:
 8003688:	4613      	mov	r3, r2
 800368a:	460a      	mov	r2, r1
 800368c:	4601      	mov	r1, r0
 800368e:	4802      	ldr	r0, [pc, #8]	; (8003698 <vsiprintf+0x10>)
 8003690:	6800      	ldr	r0, [r0, #0]
 8003692:	f7ff bfe3 	b.w	800365c <_vsiprintf_r>
 8003696:	bf00      	nop
 8003698:	20000014 	.word	0x20000014

0800369c <__ssputs_r>:
 800369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a0:	688e      	ldr	r6, [r1, #8]
 80036a2:	429e      	cmp	r6, r3
 80036a4:	4682      	mov	sl, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	4690      	mov	r8, r2
 80036aa:	461f      	mov	r7, r3
 80036ac:	d838      	bhi.n	8003720 <__ssputs_r+0x84>
 80036ae:	898a      	ldrh	r2, [r1, #12]
 80036b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036b4:	d032      	beq.n	800371c <__ssputs_r+0x80>
 80036b6:	6825      	ldr	r5, [r4, #0]
 80036b8:	6909      	ldr	r1, [r1, #16]
 80036ba:	eba5 0901 	sub.w	r9, r5, r1
 80036be:	6965      	ldr	r5, [r4, #20]
 80036c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036c8:	3301      	adds	r3, #1
 80036ca:	444b      	add	r3, r9
 80036cc:	106d      	asrs	r5, r5, #1
 80036ce:	429d      	cmp	r5, r3
 80036d0:	bf38      	it	cc
 80036d2:	461d      	movcc	r5, r3
 80036d4:	0553      	lsls	r3, r2, #21
 80036d6:	d531      	bpl.n	800373c <__ssputs_r+0xa0>
 80036d8:	4629      	mov	r1, r5
 80036da:	f000 fb63 	bl	8003da4 <_malloc_r>
 80036de:	4606      	mov	r6, r0
 80036e0:	b950      	cbnz	r0, 80036f8 <__ssputs_r+0x5c>
 80036e2:	230c      	movs	r3, #12
 80036e4:	f8ca 3000 	str.w	r3, [sl]
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f8:	6921      	ldr	r1, [r4, #16]
 80036fa:	464a      	mov	r2, r9
 80036fc:	f000 fabe 	bl	8003c7c <memcpy>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	6126      	str	r6, [r4, #16]
 800370e:	6165      	str	r5, [r4, #20]
 8003710:	444e      	add	r6, r9
 8003712:	eba5 0509 	sub.w	r5, r5, r9
 8003716:	6026      	str	r6, [r4, #0]
 8003718:	60a5      	str	r5, [r4, #8]
 800371a:	463e      	mov	r6, r7
 800371c:	42be      	cmp	r6, r7
 800371e:	d900      	bls.n	8003722 <__ssputs_r+0x86>
 8003720:	463e      	mov	r6, r7
 8003722:	6820      	ldr	r0, [r4, #0]
 8003724:	4632      	mov	r2, r6
 8003726:	4641      	mov	r1, r8
 8003728:	f000 fab6 	bl	8003c98 <memmove>
 800372c:	68a3      	ldr	r3, [r4, #8]
 800372e:	1b9b      	subs	r3, r3, r6
 8003730:	60a3      	str	r3, [r4, #8]
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	4433      	add	r3, r6
 8003736:	6023      	str	r3, [r4, #0]
 8003738:	2000      	movs	r0, #0
 800373a:	e7db      	b.n	80036f4 <__ssputs_r+0x58>
 800373c:	462a      	mov	r2, r5
 800373e:	f000 fba5 	bl	8003e8c <_realloc_r>
 8003742:	4606      	mov	r6, r0
 8003744:	2800      	cmp	r0, #0
 8003746:	d1e1      	bne.n	800370c <__ssputs_r+0x70>
 8003748:	6921      	ldr	r1, [r4, #16]
 800374a:	4650      	mov	r0, sl
 800374c:	f000 fabe 	bl	8003ccc <_free_r>
 8003750:	e7c7      	b.n	80036e2 <__ssputs_r+0x46>
	...

08003754 <_svfiprintf_r>:
 8003754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003758:	4698      	mov	r8, r3
 800375a:	898b      	ldrh	r3, [r1, #12]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	b09d      	sub	sp, #116	; 0x74
 8003760:	4607      	mov	r7, r0
 8003762:	460d      	mov	r5, r1
 8003764:	4614      	mov	r4, r2
 8003766:	d50e      	bpl.n	8003786 <_svfiprintf_r+0x32>
 8003768:	690b      	ldr	r3, [r1, #16]
 800376a:	b963      	cbnz	r3, 8003786 <_svfiprintf_r+0x32>
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	f000 fb19 	bl	8003da4 <_malloc_r>
 8003772:	6028      	str	r0, [r5, #0]
 8003774:	6128      	str	r0, [r5, #16]
 8003776:	b920      	cbnz	r0, 8003782 <_svfiprintf_r+0x2e>
 8003778:	230c      	movs	r3, #12
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	e0d1      	b.n	8003926 <_svfiprintf_r+0x1d2>
 8003782:	2340      	movs	r3, #64	; 0x40
 8003784:	616b      	str	r3, [r5, #20]
 8003786:	2300      	movs	r3, #0
 8003788:	9309      	str	r3, [sp, #36]	; 0x24
 800378a:	2320      	movs	r3, #32
 800378c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003790:	f8cd 800c 	str.w	r8, [sp, #12]
 8003794:	2330      	movs	r3, #48	; 0x30
 8003796:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003940 <_svfiprintf_r+0x1ec>
 800379a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800379e:	f04f 0901 	mov.w	r9, #1
 80037a2:	4623      	mov	r3, r4
 80037a4:	469a      	mov	sl, r3
 80037a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037aa:	b10a      	cbz	r2, 80037b0 <_svfiprintf_r+0x5c>
 80037ac:	2a25      	cmp	r2, #37	; 0x25
 80037ae:	d1f9      	bne.n	80037a4 <_svfiprintf_r+0x50>
 80037b0:	ebba 0b04 	subs.w	fp, sl, r4
 80037b4:	d00b      	beq.n	80037ce <_svfiprintf_r+0x7a>
 80037b6:	465b      	mov	r3, fp
 80037b8:	4622      	mov	r2, r4
 80037ba:	4629      	mov	r1, r5
 80037bc:	4638      	mov	r0, r7
 80037be:	f7ff ff6d 	bl	800369c <__ssputs_r>
 80037c2:	3001      	adds	r0, #1
 80037c4:	f000 80aa 	beq.w	800391c <_svfiprintf_r+0x1c8>
 80037c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037ca:	445a      	add	r2, fp
 80037cc:	9209      	str	r2, [sp, #36]	; 0x24
 80037ce:	f89a 3000 	ldrb.w	r3, [sl]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80a2 	beq.w	800391c <_svfiprintf_r+0x1c8>
 80037d8:	2300      	movs	r3, #0
 80037da:	f04f 32ff 	mov.w	r2, #4294967295
 80037de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037e2:	f10a 0a01 	add.w	sl, sl, #1
 80037e6:	9304      	str	r3, [sp, #16]
 80037e8:	9307      	str	r3, [sp, #28]
 80037ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037ee:	931a      	str	r3, [sp, #104]	; 0x68
 80037f0:	4654      	mov	r4, sl
 80037f2:	2205      	movs	r2, #5
 80037f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f8:	4851      	ldr	r0, [pc, #324]	; (8003940 <_svfiprintf_r+0x1ec>)
 80037fa:	f7fc fd01 	bl	8000200 <memchr>
 80037fe:	9a04      	ldr	r2, [sp, #16]
 8003800:	b9d8      	cbnz	r0, 800383a <_svfiprintf_r+0xe6>
 8003802:	06d0      	lsls	r0, r2, #27
 8003804:	bf44      	itt	mi
 8003806:	2320      	movmi	r3, #32
 8003808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800380c:	0711      	lsls	r1, r2, #28
 800380e:	bf44      	itt	mi
 8003810:	232b      	movmi	r3, #43	; 0x2b
 8003812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003816:	f89a 3000 	ldrb.w	r3, [sl]
 800381a:	2b2a      	cmp	r3, #42	; 0x2a
 800381c:	d015      	beq.n	800384a <_svfiprintf_r+0xf6>
 800381e:	9a07      	ldr	r2, [sp, #28]
 8003820:	4654      	mov	r4, sl
 8003822:	2000      	movs	r0, #0
 8003824:	f04f 0c0a 	mov.w	ip, #10
 8003828:	4621      	mov	r1, r4
 800382a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800382e:	3b30      	subs	r3, #48	; 0x30
 8003830:	2b09      	cmp	r3, #9
 8003832:	d94e      	bls.n	80038d2 <_svfiprintf_r+0x17e>
 8003834:	b1b0      	cbz	r0, 8003864 <_svfiprintf_r+0x110>
 8003836:	9207      	str	r2, [sp, #28]
 8003838:	e014      	b.n	8003864 <_svfiprintf_r+0x110>
 800383a:	eba0 0308 	sub.w	r3, r0, r8
 800383e:	fa09 f303 	lsl.w	r3, r9, r3
 8003842:	4313      	orrs	r3, r2
 8003844:	9304      	str	r3, [sp, #16]
 8003846:	46a2      	mov	sl, r4
 8003848:	e7d2      	b.n	80037f0 <_svfiprintf_r+0x9c>
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	1d19      	adds	r1, r3, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	9103      	str	r1, [sp, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	bfbb      	ittet	lt
 8003856:	425b      	neglt	r3, r3
 8003858:	f042 0202 	orrlt.w	r2, r2, #2
 800385c:	9307      	strge	r3, [sp, #28]
 800385e:	9307      	strlt	r3, [sp, #28]
 8003860:	bfb8      	it	lt
 8003862:	9204      	strlt	r2, [sp, #16]
 8003864:	7823      	ldrb	r3, [r4, #0]
 8003866:	2b2e      	cmp	r3, #46	; 0x2e
 8003868:	d10c      	bne.n	8003884 <_svfiprintf_r+0x130>
 800386a:	7863      	ldrb	r3, [r4, #1]
 800386c:	2b2a      	cmp	r3, #42	; 0x2a
 800386e:	d135      	bne.n	80038dc <_svfiprintf_r+0x188>
 8003870:	9b03      	ldr	r3, [sp, #12]
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	9203      	str	r2, [sp, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	bfb8      	it	lt
 800387c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003880:	3402      	adds	r4, #2
 8003882:	9305      	str	r3, [sp, #20]
 8003884:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003950 <_svfiprintf_r+0x1fc>
 8003888:	7821      	ldrb	r1, [r4, #0]
 800388a:	2203      	movs	r2, #3
 800388c:	4650      	mov	r0, sl
 800388e:	f7fc fcb7 	bl	8000200 <memchr>
 8003892:	b140      	cbz	r0, 80038a6 <_svfiprintf_r+0x152>
 8003894:	2340      	movs	r3, #64	; 0x40
 8003896:	eba0 000a 	sub.w	r0, r0, sl
 800389a:	fa03 f000 	lsl.w	r0, r3, r0
 800389e:	9b04      	ldr	r3, [sp, #16]
 80038a0:	4303      	orrs	r3, r0
 80038a2:	3401      	adds	r4, #1
 80038a4:	9304      	str	r3, [sp, #16]
 80038a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038aa:	4826      	ldr	r0, [pc, #152]	; (8003944 <_svfiprintf_r+0x1f0>)
 80038ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038b0:	2206      	movs	r2, #6
 80038b2:	f7fc fca5 	bl	8000200 <memchr>
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d038      	beq.n	800392c <_svfiprintf_r+0x1d8>
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <_svfiprintf_r+0x1f4>)
 80038bc:	bb1b      	cbnz	r3, 8003906 <_svfiprintf_r+0x1b2>
 80038be:	9b03      	ldr	r3, [sp, #12]
 80038c0:	3307      	adds	r3, #7
 80038c2:	f023 0307 	bic.w	r3, r3, #7
 80038c6:	3308      	adds	r3, #8
 80038c8:	9303      	str	r3, [sp, #12]
 80038ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038cc:	4433      	add	r3, r6
 80038ce:	9309      	str	r3, [sp, #36]	; 0x24
 80038d0:	e767      	b.n	80037a2 <_svfiprintf_r+0x4e>
 80038d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80038d6:	460c      	mov	r4, r1
 80038d8:	2001      	movs	r0, #1
 80038da:	e7a5      	b.n	8003828 <_svfiprintf_r+0xd4>
 80038dc:	2300      	movs	r3, #0
 80038de:	3401      	adds	r4, #1
 80038e0:	9305      	str	r3, [sp, #20]
 80038e2:	4619      	mov	r1, r3
 80038e4:	f04f 0c0a 	mov.w	ip, #10
 80038e8:	4620      	mov	r0, r4
 80038ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038ee:	3a30      	subs	r2, #48	; 0x30
 80038f0:	2a09      	cmp	r2, #9
 80038f2:	d903      	bls.n	80038fc <_svfiprintf_r+0x1a8>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0c5      	beq.n	8003884 <_svfiprintf_r+0x130>
 80038f8:	9105      	str	r1, [sp, #20]
 80038fa:	e7c3      	b.n	8003884 <_svfiprintf_r+0x130>
 80038fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003900:	4604      	mov	r4, r0
 8003902:	2301      	movs	r3, #1
 8003904:	e7f0      	b.n	80038e8 <_svfiprintf_r+0x194>
 8003906:	ab03      	add	r3, sp, #12
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	462a      	mov	r2, r5
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <_svfiprintf_r+0x1f8>)
 800390e:	a904      	add	r1, sp, #16
 8003910:	4638      	mov	r0, r7
 8003912:	f3af 8000 	nop.w
 8003916:	1c42      	adds	r2, r0, #1
 8003918:	4606      	mov	r6, r0
 800391a:	d1d6      	bne.n	80038ca <_svfiprintf_r+0x176>
 800391c:	89ab      	ldrh	r3, [r5, #12]
 800391e:	065b      	lsls	r3, r3, #25
 8003920:	f53f af2c 	bmi.w	800377c <_svfiprintf_r+0x28>
 8003924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003926:	b01d      	add	sp, #116	; 0x74
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	ab03      	add	r3, sp, #12
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	462a      	mov	r2, r5
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <_svfiprintf_r+0x1f8>)
 8003934:	a904      	add	r1, sp, #16
 8003936:	4638      	mov	r0, r7
 8003938:	f000 f87a 	bl	8003a30 <_printf_i>
 800393c:	e7eb      	b.n	8003916 <_svfiprintf_r+0x1c2>
 800393e:	bf00      	nop
 8003940:	08004228 	.word	0x08004228
 8003944:	08004232 	.word	0x08004232
 8003948:	00000000 	.word	0x00000000
 800394c:	0800369d 	.word	0x0800369d
 8003950:	0800422e 	.word	0x0800422e

08003954 <_printf_common>:
 8003954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003958:	4616      	mov	r6, r2
 800395a:	4699      	mov	r9, r3
 800395c:	688a      	ldr	r2, [r1, #8]
 800395e:	690b      	ldr	r3, [r1, #16]
 8003960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003964:	4293      	cmp	r3, r2
 8003966:	bfb8      	it	lt
 8003968:	4613      	movlt	r3, r2
 800396a:	6033      	str	r3, [r6, #0]
 800396c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003970:	4607      	mov	r7, r0
 8003972:	460c      	mov	r4, r1
 8003974:	b10a      	cbz	r2, 800397a <_printf_common+0x26>
 8003976:	3301      	adds	r3, #1
 8003978:	6033      	str	r3, [r6, #0]
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	0699      	lsls	r1, r3, #26
 800397e:	bf42      	ittt	mi
 8003980:	6833      	ldrmi	r3, [r6, #0]
 8003982:	3302      	addmi	r3, #2
 8003984:	6033      	strmi	r3, [r6, #0]
 8003986:	6825      	ldr	r5, [r4, #0]
 8003988:	f015 0506 	ands.w	r5, r5, #6
 800398c:	d106      	bne.n	800399c <_printf_common+0x48>
 800398e:	f104 0a19 	add.w	sl, r4, #25
 8003992:	68e3      	ldr	r3, [r4, #12]
 8003994:	6832      	ldr	r2, [r6, #0]
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	42ab      	cmp	r3, r5
 800399a:	dc26      	bgt.n	80039ea <_printf_common+0x96>
 800399c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039a0:	1e13      	subs	r3, r2, #0
 80039a2:	6822      	ldr	r2, [r4, #0]
 80039a4:	bf18      	it	ne
 80039a6:	2301      	movne	r3, #1
 80039a8:	0692      	lsls	r2, r2, #26
 80039aa:	d42b      	bmi.n	8003a04 <_printf_common+0xb0>
 80039ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039b0:	4649      	mov	r1, r9
 80039b2:	4638      	mov	r0, r7
 80039b4:	47c0      	blx	r8
 80039b6:	3001      	adds	r0, #1
 80039b8:	d01e      	beq.n	80039f8 <_printf_common+0xa4>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	68e5      	ldr	r5, [r4, #12]
 80039be:	6832      	ldr	r2, [r6, #0]
 80039c0:	f003 0306 	and.w	r3, r3, #6
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	bf08      	it	eq
 80039c8:	1aad      	subeq	r5, r5, r2
 80039ca:	68a3      	ldr	r3, [r4, #8]
 80039cc:	6922      	ldr	r2, [r4, #16]
 80039ce:	bf0c      	ite	eq
 80039d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d4:	2500      	movne	r5, #0
 80039d6:	4293      	cmp	r3, r2
 80039d8:	bfc4      	itt	gt
 80039da:	1a9b      	subgt	r3, r3, r2
 80039dc:	18ed      	addgt	r5, r5, r3
 80039de:	2600      	movs	r6, #0
 80039e0:	341a      	adds	r4, #26
 80039e2:	42b5      	cmp	r5, r6
 80039e4:	d11a      	bne.n	8003a1c <_printf_common+0xc8>
 80039e6:	2000      	movs	r0, #0
 80039e8:	e008      	b.n	80039fc <_printf_common+0xa8>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4652      	mov	r2, sl
 80039ee:	4649      	mov	r1, r9
 80039f0:	4638      	mov	r0, r7
 80039f2:	47c0      	blx	r8
 80039f4:	3001      	adds	r0, #1
 80039f6:	d103      	bne.n	8003a00 <_printf_common+0xac>
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a00:	3501      	adds	r5, #1
 8003a02:	e7c6      	b.n	8003992 <_printf_common+0x3e>
 8003a04:	18e1      	adds	r1, r4, r3
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	2030      	movs	r0, #48	; 0x30
 8003a0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a0e:	4422      	add	r2, r4
 8003a10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a18:	3302      	adds	r3, #2
 8003a1a:	e7c7      	b.n	80039ac <_printf_common+0x58>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4622      	mov	r2, r4
 8003a20:	4649      	mov	r1, r9
 8003a22:	4638      	mov	r0, r7
 8003a24:	47c0      	blx	r8
 8003a26:	3001      	adds	r0, #1
 8003a28:	d0e6      	beq.n	80039f8 <_printf_common+0xa4>
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7d9      	b.n	80039e2 <_printf_common+0x8e>
	...

08003a30 <_printf_i>:
 8003a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a34:	7e0f      	ldrb	r7, [r1, #24]
 8003a36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a38:	2f78      	cmp	r7, #120	; 0x78
 8003a3a:	4691      	mov	r9, r2
 8003a3c:	4680      	mov	r8, r0
 8003a3e:	460c      	mov	r4, r1
 8003a40:	469a      	mov	sl, r3
 8003a42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a46:	d807      	bhi.n	8003a58 <_printf_i+0x28>
 8003a48:	2f62      	cmp	r7, #98	; 0x62
 8003a4a:	d80a      	bhi.n	8003a62 <_printf_i+0x32>
 8003a4c:	2f00      	cmp	r7, #0
 8003a4e:	f000 80d8 	beq.w	8003c02 <_printf_i+0x1d2>
 8003a52:	2f58      	cmp	r7, #88	; 0x58
 8003a54:	f000 80a3 	beq.w	8003b9e <_printf_i+0x16e>
 8003a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a60:	e03a      	b.n	8003ad8 <_printf_i+0xa8>
 8003a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a66:	2b15      	cmp	r3, #21
 8003a68:	d8f6      	bhi.n	8003a58 <_printf_i+0x28>
 8003a6a:	a101      	add	r1, pc, #4	; (adr r1, 8003a70 <_printf_i+0x40>)
 8003a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a70:	08003ac9 	.word	0x08003ac9
 8003a74:	08003add 	.word	0x08003add
 8003a78:	08003a59 	.word	0x08003a59
 8003a7c:	08003a59 	.word	0x08003a59
 8003a80:	08003a59 	.word	0x08003a59
 8003a84:	08003a59 	.word	0x08003a59
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003a59 	.word	0x08003a59
 8003a90:	08003a59 	.word	0x08003a59
 8003a94:	08003a59 	.word	0x08003a59
 8003a98:	08003a59 	.word	0x08003a59
 8003a9c:	08003be9 	.word	0x08003be9
 8003aa0:	08003b0d 	.word	0x08003b0d
 8003aa4:	08003bcb 	.word	0x08003bcb
 8003aa8:	08003a59 	.word	0x08003a59
 8003aac:	08003a59 	.word	0x08003a59
 8003ab0:	08003c0b 	.word	0x08003c0b
 8003ab4:	08003a59 	.word	0x08003a59
 8003ab8:	08003b0d 	.word	0x08003b0d
 8003abc:	08003a59 	.word	0x08003a59
 8003ac0:	08003a59 	.word	0x08003a59
 8003ac4:	08003bd3 	.word	0x08003bd3
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	602a      	str	r2, [r5, #0]
 8003ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0a3      	b.n	8003c24 <_printf_i+0x1f4>
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	6829      	ldr	r1, [r5, #0]
 8003ae0:	0606      	lsls	r6, r0, #24
 8003ae2:	f101 0304 	add.w	r3, r1, #4
 8003ae6:	d50a      	bpl.n	8003afe <_printf_i+0xce>
 8003ae8:	680e      	ldr	r6, [r1, #0]
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	2e00      	cmp	r6, #0
 8003aee:	da03      	bge.n	8003af8 <_printf_i+0xc8>
 8003af0:	232d      	movs	r3, #45	; 0x2d
 8003af2:	4276      	negs	r6, r6
 8003af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af8:	485e      	ldr	r0, [pc, #376]	; (8003c74 <_printf_i+0x244>)
 8003afa:	230a      	movs	r3, #10
 8003afc:	e019      	b.n	8003b32 <_printf_i+0x102>
 8003afe:	680e      	ldr	r6, [r1, #0]
 8003b00:	602b      	str	r3, [r5, #0]
 8003b02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b06:	bf18      	it	ne
 8003b08:	b236      	sxthne	r6, r6
 8003b0a:	e7ef      	b.n	8003aec <_printf_i+0xbc>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	6820      	ldr	r0, [r4, #0]
 8003b10:	1d19      	adds	r1, r3, #4
 8003b12:	6029      	str	r1, [r5, #0]
 8003b14:	0601      	lsls	r1, r0, #24
 8003b16:	d501      	bpl.n	8003b1c <_printf_i+0xec>
 8003b18:	681e      	ldr	r6, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <_printf_i+0xf2>
 8003b1c:	0646      	lsls	r6, r0, #25
 8003b1e:	d5fb      	bpl.n	8003b18 <_printf_i+0xe8>
 8003b20:	881e      	ldrh	r6, [r3, #0]
 8003b22:	4854      	ldr	r0, [pc, #336]	; (8003c74 <_printf_i+0x244>)
 8003b24:	2f6f      	cmp	r7, #111	; 0x6f
 8003b26:	bf0c      	ite	eq
 8003b28:	2308      	moveq	r3, #8
 8003b2a:	230a      	movne	r3, #10
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b32:	6865      	ldr	r5, [r4, #4]
 8003b34:	60a5      	str	r5, [r4, #8]
 8003b36:	2d00      	cmp	r5, #0
 8003b38:	bfa2      	ittt	ge
 8003b3a:	6821      	ldrge	r1, [r4, #0]
 8003b3c:	f021 0104 	bicge.w	r1, r1, #4
 8003b40:	6021      	strge	r1, [r4, #0]
 8003b42:	b90e      	cbnz	r6, 8003b48 <_printf_i+0x118>
 8003b44:	2d00      	cmp	r5, #0
 8003b46:	d04d      	beq.n	8003be4 <_printf_i+0x1b4>
 8003b48:	4615      	mov	r5, r2
 8003b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8003b52:	5dc7      	ldrb	r7, [r0, r7]
 8003b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b58:	4637      	mov	r7, r6
 8003b5a:	42bb      	cmp	r3, r7
 8003b5c:	460e      	mov	r6, r1
 8003b5e:	d9f4      	bls.n	8003b4a <_printf_i+0x11a>
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d10b      	bne.n	8003b7c <_printf_i+0x14c>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	07de      	lsls	r6, r3, #31
 8003b68:	d508      	bpl.n	8003b7c <_printf_i+0x14c>
 8003b6a:	6923      	ldr	r3, [r4, #16]
 8003b6c:	6861      	ldr	r1, [r4, #4]
 8003b6e:	4299      	cmp	r1, r3
 8003b70:	bfde      	ittt	le
 8003b72:	2330      	movle	r3, #48	; 0x30
 8003b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b7c:	1b52      	subs	r2, r2, r5
 8003b7e:	6122      	str	r2, [r4, #16]
 8003b80:	f8cd a000 	str.w	sl, [sp]
 8003b84:	464b      	mov	r3, r9
 8003b86:	aa03      	add	r2, sp, #12
 8003b88:	4621      	mov	r1, r4
 8003b8a:	4640      	mov	r0, r8
 8003b8c:	f7ff fee2 	bl	8003954 <_printf_common>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d14c      	bne.n	8003c2e <_printf_i+0x1fe>
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	b004      	add	sp, #16
 8003b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b9e:	4835      	ldr	r0, [pc, #212]	; (8003c74 <_printf_i+0x244>)
 8003ba0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ba4:	6829      	ldr	r1, [r5, #0]
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bac:	6029      	str	r1, [r5, #0]
 8003bae:	061d      	lsls	r5, r3, #24
 8003bb0:	d514      	bpl.n	8003bdc <_printf_i+0x1ac>
 8003bb2:	07df      	lsls	r7, r3, #31
 8003bb4:	bf44      	itt	mi
 8003bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8003bba:	6023      	strmi	r3, [r4, #0]
 8003bbc:	b91e      	cbnz	r6, 8003bc6 <_printf_i+0x196>
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	f023 0320 	bic.w	r3, r3, #32
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	2310      	movs	r3, #16
 8003bc8:	e7b0      	b.n	8003b2c <_printf_i+0xfc>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f043 0320 	orr.w	r3, r3, #32
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	2378      	movs	r3, #120	; 0x78
 8003bd4:	4828      	ldr	r0, [pc, #160]	; (8003c78 <_printf_i+0x248>)
 8003bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bda:	e7e3      	b.n	8003ba4 <_printf_i+0x174>
 8003bdc:	0659      	lsls	r1, r3, #25
 8003bde:	bf48      	it	mi
 8003be0:	b2b6      	uxthmi	r6, r6
 8003be2:	e7e6      	b.n	8003bb2 <_printf_i+0x182>
 8003be4:	4615      	mov	r5, r2
 8003be6:	e7bb      	b.n	8003b60 <_printf_i+0x130>
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	6826      	ldr	r6, [r4, #0]
 8003bec:	6961      	ldr	r1, [r4, #20]
 8003bee:	1d18      	adds	r0, r3, #4
 8003bf0:	6028      	str	r0, [r5, #0]
 8003bf2:	0635      	lsls	r5, r6, #24
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	d501      	bpl.n	8003bfc <_printf_i+0x1cc>
 8003bf8:	6019      	str	r1, [r3, #0]
 8003bfa:	e002      	b.n	8003c02 <_printf_i+0x1d2>
 8003bfc:	0670      	lsls	r0, r6, #25
 8003bfe:	d5fb      	bpl.n	8003bf8 <_printf_i+0x1c8>
 8003c00:	8019      	strh	r1, [r3, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	4615      	mov	r5, r2
 8003c08:	e7ba      	b.n	8003b80 <_printf_i+0x150>
 8003c0a:	682b      	ldr	r3, [r5, #0]
 8003c0c:	1d1a      	adds	r2, r3, #4
 8003c0e:	602a      	str	r2, [r5, #0]
 8003c10:	681d      	ldr	r5, [r3, #0]
 8003c12:	6862      	ldr	r2, [r4, #4]
 8003c14:	2100      	movs	r1, #0
 8003c16:	4628      	mov	r0, r5
 8003c18:	f7fc faf2 	bl	8000200 <memchr>
 8003c1c:	b108      	cbz	r0, 8003c22 <_printf_i+0x1f2>
 8003c1e:	1b40      	subs	r0, r0, r5
 8003c20:	6060      	str	r0, [r4, #4]
 8003c22:	6863      	ldr	r3, [r4, #4]
 8003c24:	6123      	str	r3, [r4, #16]
 8003c26:	2300      	movs	r3, #0
 8003c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2c:	e7a8      	b.n	8003b80 <_printf_i+0x150>
 8003c2e:	6923      	ldr	r3, [r4, #16]
 8003c30:	462a      	mov	r2, r5
 8003c32:	4649      	mov	r1, r9
 8003c34:	4640      	mov	r0, r8
 8003c36:	47d0      	blx	sl
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d0ab      	beq.n	8003b94 <_printf_i+0x164>
 8003c3c:	6823      	ldr	r3, [r4, #0]
 8003c3e:	079b      	lsls	r3, r3, #30
 8003c40:	d413      	bmi.n	8003c6a <_printf_i+0x23a>
 8003c42:	68e0      	ldr	r0, [r4, #12]
 8003c44:	9b03      	ldr	r3, [sp, #12]
 8003c46:	4298      	cmp	r0, r3
 8003c48:	bfb8      	it	lt
 8003c4a:	4618      	movlt	r0, r3
 8003c4c:	e7a4      	b.n	8003b98 <_printf_i+0x168>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	4632      	mov	r2, r6
 8003c52:	4649      	mov	r1, r9
 8003c54:	4640      	mov	r0, r8
 8003c56:	47d0      	blx	sl
 8003c58:	3001      	adds	r0, #1
 8003c5a:	d09b      	beq.n	8003b94 <_printf_i+0x164>
 8003c5c:	3501      	adds	r5, #1
 8003c5e:	68e3      	ldr	r3, [r4, #12]
 8003c60:	9903      	ldr	r1, [sp, #12]
 8003c62:	1a5b      	subs	r3, r3, r1
 8003c64:	42ab      	cmp	r3, r5
 8003c66:	dcf2      	bgt.n	8003c4e <_printf_i+0x21e>
 8003c68:	e7eb      	b.n	8003c42 <_printf_i+0x212>
 8003c6a:	2500      	movs	r5, #0
 8003c6c:	f104 0619 	add.w	r6, r4, #25
 8003c70:	e7f5      	b.n	8003c5e <_printf_i+0x22e>
 8003c72:	bf00      	nop
 8003c74:	08004239 	.word	0x08004239
 8003c78:	0800424a 	.word	0x0800424a

08003c7c <memcpy>:
 8003c7c:	440a      	add	r2, r1
 8003c7e:	4291      	cmp	r1, r2
 8003c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c84:	d100      	bne.n	8003c88 <memcpy+0xc>
 8003c86:	4770      	bx	lr
 8003c88:	b510      	push	{r4, lr}
 8003c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c92:	4291      	cmp	r1, r2
 8003c94:	d1f9      	bne.n	8003c8a <memcpy+0xe>
 8003c96:	bd10      	pop	{r4, pc}

08003c98 <memmove>:
 8003c98:	4288      	cmp	r0, r1
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	eb01 0402 	add.w	r4, r1, r2
 8003ca0:	d902      	bls.n	8003ca8 <memmove+0x10>
 8003ca2:	4284      	cmp	r4, r0
 8003ca4:	4623      	mov	r3, r4
 8003ca6:	d807      	bhi.n	8003cb8 <memmove+0x20>
 8003ca8:	1e43      	subs	r3, r0, #1
 8003caa:	42a1      	cmp	r1, r4
 8003cac:	d008      	beq.n	8003cc0 <memmove+0x28>
 8003cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cb6:	e7f8      	b.n	8003caa <memmove+0x12>
 8003cb8:	4402      	add	r2, r0
 8003cba:	4601      	mov	r1, r0
 8003cbc:	428a      	cmp	r2, r1
 8003cbe:	d100      	bne.n	8003cc2 <memmove+0x2a>
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cca:	e7f7      	b.n	8003cbc <memmove+0x24>

08003ccc <_free_r>:
 8003ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cce:	2900      	cmp	r1, #0
 8003cd0:	d044      	beq.n	8003d5c <_free_r+0x90>
 8003cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd6:	9001      	str	r0, [sp, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f1a1 0404 	sub.w	r4, r1, #4
 8003cde:	bfb8      	it	lt
 8003ce0:	18e4      	addlt	r4, r4, r3
 8003ce2:	f000 f913 	bl	8003f0c <__malloc_lock>
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <_free_r+0x94>)
 8003ce8:	9801      	ldr	r0, [sp, #4]
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	b933      	cbnz	r3, 8003cfc <_free_r+0x30>
 8003cee:	6063      	str	r3, [r4, #4]
 8003cf0:	6014      	str	r4, [r2, #0]
 8003cf2:	b003      	add	sp, #12
 8003cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cf8:	f000 b90e 	b.w	8003f18 <__malloc_unlock>
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	d908      	bls.n	8003d12 <_free_r+0x46>
 8003d00:	6825      	ldr	r5, [r4, #0]
 8003d02:	1961      	adds	r1, r4, r5
 8003d04:	428b      	cmp	r3, r1
 8003d06:	bf01      	itttt	eq
 8003d08:	6819      	ldreq	r1, [r3, #0]
 8003d0a:	685b      	ldreq	r3, [r3, #4]
 8003d0c:	1949      	addeq	r1, r1, r5
 8003d0e:	6021      	streq	r1, [r4, #0]
 8003d10:	e7ed      	b.n	8003cee <_free_r+0x22>
 8003d12:	461a      	mov	r2, r3
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	b10b      	cbz	r3, 8003d1c <_free_r+0x50>
 8003d18:	42a3      	cmp	r3, r4
 8003d1a:	d9fa      	bls.n	8003d12 <_free_r+0x46>
 8003d1c:	6811      	ldr	r1, [r2, #0]
 8003d1e:	1855      	adds	r5, r2, r1
 8003d20:	42a5      	cmp	r5, r4
 8003d22:	d10b      	bne.n	8003d3c <_free_r+0x70>
 8003d24:	6824      	ldr	r4, [r4, #0]
 8003d26:	4421      	add	r1, r4
 8003d28:	1854      	adds	r4, r2, r1
 8003d2a:	42a3      	cmp	r3, r4
 8003d2c:	6011      	str	r1, [r2, #0]
 8003d2e:	d1e0      	bne.n	8003cf2 <_free_r+0x26>
 8003d30:	681c      	ldr	r4, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	6053      	str	r3, [r2, #4]
 8003d36:	4421      	add	r1, r4
 8003d38:	6011      	str	r1, [r2, #0]
 8003d3a:	e7da      	b.n	8003cf2 <_free_r+0x26>
 8003d3c:	d902      	bls.n	8003d44 <_free_r+0x78>
 8003d3e:	230c      	movs	r3, #12
 8003d40:	6003      	str	r3, [r0, #0]
 8003d42:	e7d6      	b.n	8003cf2 <_free_r+0x26>
 8003d44:	6825      	ldr	r5, [r4, #0]
 8003d46:	1961      	adds	r1, r4, r5
 8003d48:	428b      	cmp	r3, r1
 8003d4a:	bf04      	itt	eq
 8003d4c:	6819      	ldreq	r1, [r3, #0]
 8003d4e:	685b      	ldreq	r3, [r3, #4]
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	bf04      	itt	eq
 8003d54:	1949      	addeq	r1, r1, r5
 8003d56:	6021      	streq	r1, [r4, #0]
 8003d58:	6054      	str	r4, [r2, #4]
 8003d5a:	e7ca      	b.n	8003cf2 <_free_r+0x26>
 8003d5c:	b003      	add	sp, #12
 8003d5e:	bd30      	pop	{r4, r5, pc}
 8003d60:	20000214 	.word	0x20000214

08003d64 <sbrk_aligned>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	4e0e      	ldr	r6, [pc, #56]	; (8003da0 <sbrk_aligned+0x3c>)
 8003d68:	460c      	mov	r4, r1
 8003d6a:	6831      	ldr	r1, [r6, #0]
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	b911      	cbnz	r1, 8003d76 <sbrk_aligned+0x12>
 8003d70:	f000 f8bc 	bl	8003eec <_sbrk_r>
 8003d74:	6030      	str	r0, [r6, #0]
 8003d76:	4621      	mov	r1, r4
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f000 f8b7 	bl	8003eec <_sbrk_r>
 8003d7e:	1c43      	adds	r3, r0, #1
 8003d80:	d00a      	beq.n	8003d98 <sbrk_aligned+0x34>
 8003d82:	1cc4      	adds	r4, r0, #3
 8003d84:	f024 0403 	bic.w	r4, r4, #3
 8003d88:	42a0      	cmp	r0, r4
 8003d8a:	d007      	beq.n	8003d9c <sbrk_aligned+0x38>
 8003d8c:	1a21      	subs	r1, r4, r0
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f8ac 	bl	8003eec <_sbrk_r>
 8003d94:	3001      	adds	r0, #1
 8003d96:	d101      	bne.n	8003d9c <sbrk_aligned+0x38>
 8003d98:	f04f 34ff 	mov.w	r4, #4294967295
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	20000218 	.word	0x20000218

08003da4 <_malloc_r>:
 8003da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da8:	1ccd      	adds	r5, r1, #3
 8003daa:	f025 0503 	bic.w	r5, r5, #3
 8003dae:	3508      	adds	r5, #8
 8003db0:	2d0c      	cmp	r5, #12
 8003db2:	bf38      	it	cc
 8003db4:	250c      	movcc	r5, #12
 8003db6:	2d00      	cmp	r5, #0
 8003db8:	4607      	mov	r7, r0
 8003dba:	db01      	blt.n	8003dc0 <_malloc_r+0x1c>
 8003dbc:	42a9      	cmp	r1, r5
 8003dbe:	d905      	bls.n	8003dcc <_malloc_r+0x28>
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dcc:	4e2e      	ldr	r6, [pc, #184]	; (8003e88 <_malloc_r+0xe4>)
 8003dce:	f000 f89d 	bl	8003f0c <__malloc_lock>
 8003dd2:	6833      	ldr	r3, [r6, #0]
 8003dd4:	461c      	mov	r4, r3
 8003dd6:	bb34      	cbnz	r4, 8003e26 <_malloc_r+0x82>
 8003dd8:	4629      	mov	r1, r5
 8003dda:	4638      	mov	r0, r7
 8003ddc:	f7ff ffc2 	bl	8003d64 <sbrk_aligned>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	4604      	mov	r4, r0
 8003de4:	d14d      	bne.n	8003e82 <_malloc_r+0xde>
 8003de6:	6834      	ldr	r4, [r6, #0]
 8003de8:	4626      	mov	r6, r4
 8003dea:	2e00      	cmp	r6, #0
 8003dec:	d140      	bne.n	8003e70 <_malloc_r+0xcc>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	4631      	mov	r1, r6
 8003df2:	4638      	mov	r0, r7
 8003df4:	eb04 0803 	add.w	r8, r4, r3
 8003df8:	f000 f878 	bl	8003eec <_sbrk_r>
 8003dfc:	4580      	cmp	r8, r0
 8003dfe:	d13a      	bne.n	8003e76 <_malloc_r+0xd2>
 8003e00:	6821      	ldr	r1, [r4, #0]
 8003e02:	3503      	adds	r5, #3
 8003e04:	1a6d      	subs	r5, r5, r1
 8003e06:	f025 0503 	bic.w	r5, r5, #3
 8003e0a:	3508      	adds	r5, #8
 8003e0c:	2d0c      	cmp	r5, #12
 8003e0e:	bf38      	it	cc
 8003e10:	250c      	movcc	r5, #12
 8003e12:	4629      	mov	r1, r5
 8003e14:	4638      	mov	r0, r7
 8003e16:	f7ff ffa5 	bl	8003d64 <sbrk_aligned>
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d02b      	beq.n	8003e76 <_malloc_r+0xd2>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	442b      	add	r3, r5
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	e00e      	b.n	8003e44 <_malloc_r+0xa0>
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	1b52      	subs	r2, r2, r5
 8003e2a:	d41e      	bmi.n	8003e6a <_malloc_r+0xc6>
 8003e2c:	2a0b      	cmp	r2, #11
 8003e2e:	d916      	bls.n	8003e5e <_malloc_r+0xba>
 8003e30:	1961      	adds	r1, r4, r5
 8003e32:	42a3      	cmp	r3, r4
 8003e34:	6025      	str	r5, [r4, #0]
 8003e36:	bf18      	it	ne
 8003e38:	6059      	strne	r1, [r3, #4]
 8003e3a:	6863      	ldr	r3, [r4, #4]
 8003e3c:	bf08      	it	eq
 8003e3e:	6031      	streq	r1, [r6, #0]
 8003e40:	5162      	str	r2, [r4, r5]
 8003e42:	604b      	str	r3, [r1, #4]
 8003e44:	4638      	mov	r0, r7
 8003e46:	f104 060b 	add.w	r6, r4, #11
 8003e4a:	f000 f865 	bl	8003f18 <__malloc_unlock>
 8003e4e:	f026 0607 	bic.w	r6, r6, #7
 8003e52:	1d23      	adds	r3, r4, #4
 8003e54:	1af2      	subs	r2, r6, r3
 8003e56:	d0b6      	beq.n	8003dc6 <_malloc_r+0x22>
 8003e58:	1b9b      	subs	r3, r3, r6
 8003e5a:	50a3      	str	r3, [r4, r2]
 8003e5c:	e7b3      	b.n	8003dc6 <_malloc_r+0x22>
 8003e5e:	6862      	ldr	r2, [r4, #4]
 8003e60:	42a3      	cmp	r3, r4
 8003e62:	bf0c      	ite	eq
 8003e64:	6032      	streq	r2, [r6, #0]
 8003e66:	605a      	strne	r2, [r3, #4]
 8003e68:	e7ec      	b.n	8003e44 <_malloc_r+0xa0>
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	6864      	ldr	r4, [r4, #4]
 8003e6e:	e7b2      	b.n	8003dd6 <_malloc_r+0x32>
 8003e70:	4634      	mov	r4, r6
 8003e72:	6876      	ldr	r6, [r6, #4]
 8003e74:	e7b9      	b.n	8003dea <_malloc_r+0x46>
 8003e76:	230c      	movs	r3, #12
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	f000 f84c 	bl	8003f18 <__malloc_unlock>
 8003e80:	e7a1      	b.n	8003dc6 <_malloc_r+0x22>
 8003e82:	6025      	str	r5, [r4, #0]
 8003e84:	e7de      	b.n	8003e44 <_malloc_r+0xa0>
 8003e86:	bf00      	nop
 8003e88:	20000214 	.word	0x20000214

08003e8c <_realloc_r>:
 8003e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e90:	4680      	mov	r8, r0
 8003e92:	4614      	mov	r4, r2
 8003e94:	460e      	mov	r6, r1
 8003e96:	b921      	cbnz	r1, 8003ea2 <_realloc_r+0x16>
 8003e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	f7ff bf81 	b.w	8003da4 <_malloc_r>
 8003ea2:	b92a      	cbnz	r2, 8003eb0 <_realloc_r+0x24>
 8003ea4:	f7ff ff12 	bl	8003ccc <_free_r>
 8003ea8:	4625      	mov	r5, r4
 8003eaa:	4628      	mov	r0, r5
 8003eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb0:	f000 f838 	bl	8003f24 <_malloc_usable_size_r>
 8003eb4:	4284      	cmp	r4, r0
 8003eb6:	4607      	mov	r7, r0
 8003eb8:	d802      	bhi.n	8003ec0 <_realloc_r+0x34>
 8003eba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ebe:	d812      	bhi.n	8003ee6 <_realloc_r+0x5a>
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	f7ff ff6e 	bl	8003da4 <_malloc_r>
 8003ec8:	4605      	mov	r5, r0
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d0ed      	beq.n	8003eaa <_realloc_r+0x1e>
 8003ece:	42bc      	cmp	r4, r7
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	4631      	mov	r1, r6
 8003ed4:	bf28      	it	cs
 8003ed6:	463a      	movcs	r2, r7
 8003ed8:	f7ff fed0 	bl	8003c7c <memcpy>
 8003edc:	4631      	mov	r1, r6
 8003ede:	4640      	mov	r0, r8
 8003ee0:	f7ff fef4 	bl	8003ccc <_free_r>
 8003ee4:	e7e1      	b.n	8003eaa <_realloc_r+0x1e>
 8003ee6:	4635      	mov	r5, r6
 8003ee8:	e7df      	b.n	8003eaa <_realloc_r+0x1e>
	...

08003eec <_sbrk_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4d06      	ldr	r5, [pc, #24]	; (8003f08 <_sbrk_r+0x1c>)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	602b      	str	r3, [r5, #0]
 8003ef8:	f7fd faf2 	bl	80014e0 <_sbrk>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d102      	bne.n	8003f06 <_sbrk_r+0x1a>
 8003f00:	682b      	ldr	r3, [r5, #0]
 8003f02:	b103      	cbz	r3, 8003f06 <_sbrk_r+0x1a>
 8003f04:	6023      	str	r3, [r4, #0]
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	2000021c 	.word	0x2000021c

08003f0c <__malloc_lock>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__malloc_lock+0x8>)
 8003f0e:	f000 b811 	b.w	8003f34 <__retarget_lock_acquire_recursive>
 8003f12:	bf00      	nop
 8003f14:	20000220 	.word	0x20000220

08003f18 <__malloc_unlock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_unlock+0x8>)
 8003f1a:	f000 b80c 	b.w	8003f36 <__retarget_lock_release_recursive>
 8003f1e:	bf00      	nop
 8003f20:	20000220 	.word	0x20000220

08003f24 <_malloc_usable_size_r>:
 8003f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f28:	1f18      	subs	r0, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bfbc      	itt	lt
 8003f2e:	580b      	ldrlt	r3, [r1, r0]
 8003f30:	18c0      	addlt	r0, r0, r3
 8003f32:	4770      	bx	lr

08003f34 <__retarget_lock_acquire_recursive>:
 8003f34:	4770      	bx	lr

08003f36 <__retarget_lock_release_recursive>:
 8003f36:	4770      	bx	lr

08003f38 <_init>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr

08003f44 <_fini>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr
